{"version":3,"sources":["../src/cryptography/ed25519-keypair.ts","../src/serialization/base64.ts","../src/cryptography/ed25519-publickey.ts","../src/cryptography/publickey.ts","../src/cryptography/secp256k1-keypair.ts","../src/cryptography/secp256k1-publickey.ts","../src/providers/provider.ts","../src/rpc/client.ts","../src/rpc/client.guard.ts","../src/types/index.guard.ts","../src/types/common.ts","../src/types/objects.ts","../src/types/events.ts","../src/types/transactions.ts","../src/types/framework.ts","../src/types/option.ts","../src/types/sui-bcs.ts","../src/rpc/websocket-client.ts","../src/providers/json-rpc-provider.ts","../src/providers/json-rpc-provider-with-cache.ts","../src/serialization/hex.ts","../src/signers/txn-data-serializers/rpc-txn-data-serializer.ts","../src/signers/txn-data-serializers/call-arg-serializer.ts","../src/signers/txn-data-serializers/local-txn-data-serializer.ts","../src/providers/void-provider.ts","../src/signers/signer-with-provider.ts","../src/signers/raw-signer.ts"],"sourcesContent":["// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from 'tweetnacl';\nimport { Base64DataBuffer } from '../serialization/base64';\nimport { Keypair } from './keypair';\nimport { Ed25519PublicKey } from './ed25519-publickey';\nimport { SignatureScheme } from './publickey';\n\n/**\n * Ed25519 Keypair data\n */\nexport interface Ed25519KeypairData {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An Ed25519 Keypair used for signing transactions.\n */\nexport class Ed25519Keypair implements Keypair {\n  private keypair: Ed25519KeypairData;\n\n  /**\n   * Create a new Ed25519 keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair Ed25519 keypair\n   */\n  constructor(keypair?: Ed25519KeypairData) {\n    if (keypair) {\n      this.keypair = keypair;\n    } else {\n      this.keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Get the key scheme of the keypair ED25519\n   */\n  getKeyScheme(): SignatureScheme {\n    return 'ED25519';\n  }\n\n  /**\n   * Generate a new random Ed25519 keypair\n   */\n  static generate(): Ed25519Keypair {\n    return new Ed25519Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a Ed25519 keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: { skipValidation?: boolean }\n  ): Ed25519Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('sui validation');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Ed25519Keypair(keypair);\n  }\n\n  /**\n   * Generate a Ed25519 keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Ed25519Keypair {\n    return new Ed25519Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this Ed25519 keypair\n   */\n  getPublicKey(): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.keypair.publicKey);\n  }\n\n  /**\n   * Return the signature for the provided data using Ed25519.\n   */\n  signData(data: Base64DataBuffer): Base64DataBuffer {\n    return new Base64DataBuffer(\n      nacl.sign.detached(data.getData(), this.keypair.secretKey)\n    );\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Buffer } from 'buffer';\n\nexport class Base64DataBuffer {\n  private data: Uint8Array;\n\n  constructor(data: Uint8Array | string) {\n    if (typeof data === 'string') {\n      this.data = new Uint8Array(Buffer.from(data, 'base64'));\n    } else {\n      this.data = data;\n    }\n  }\n\n  getData(): Uint8Array {\n    return this.data;\n  }\n\n  getLength(): number {\n    return this.data.length;\n  }\n\n  toString(): string {\n    return Buffer.from(this.data).toString('base64');\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport sha3 from 'js-sha3';\nimport {\n  checkPublicKeyData,\n  PublicKeyInitData,\n  SIGNATURE_SCHEME_TO_FLAG,\n} from './publickey';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new Ed25519PublicKey object\n   * @param value ed25519 public key as buffer or base-64 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    if (checkPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        const buffer = Buffer.from(value, 'base64');\n        if (buffer.length !== PUBLIC_KEY_SIZE) {\n          throw new Error(\n            `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${buffer.length}`\n          );\n        }\n        this._bn = new BN(buffer);\n      } else {\n        this._bn = new BN(value);\n      }\n      let length = this._bn.byteLength();\n      if (length != PUBLIC_KEY_SIZE) {\n        throw new Error(\n          `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${length}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Checks if two Ed25519 public keys are equal\n   */\n  equals(publicKey: Ed25519PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-64 representation of the Ed25519 public key\n   */\n  toBase64(): string {\n    return this.toBuffer().toString('base64');\n  }\n\n  /**\n   * Return the byte array representation of the Ed25519 public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the Ed25519 public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_SIZE) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(PUBLIC_KEY_SIZE);\n    b.copy(zeroPad, PUBLIC_KEY_SIZE - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-64 representation of the Ed25519 public key\n   */\n  toString(): string {\n    return this.toBase64();\n  }\n\n  /**\n   * Return the Sui address associated with this Ed25519 public key\n   */\n  toSuiAddress(): string {\n    let tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG['ED25519']]);\n    tmp.set(this.toBytes(), 1);\n    return sha3.sha3_256(tmp).slice(0, 40);\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport BN from 'bn.js';\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class.\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\n/**\n * A keypair used for signing transactions.\n */\nexport type SignatureScheme = 'ED25519' | 'Secp256k1';\n\nexport const SIGNATURE_SCHEME_TO_FLAG = {\n  ED25519: 0x00,\n  Secp256k1: 0x01,\n};\n\nexport function checkPublicKeyData(\n  value: PublicKeyInitData\n): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport interface PublicKey {\n  /**\n   * Checks if two public keys are equal\n   */\n  equals(publicKey: PublicKey): boolean;\n\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toBase64(): string;\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array;\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer;\n\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toString(): string;\n\n  /**\n   * Return the Sui address associated with this public key\n   */\n  toSuiAddress(): string;\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as secp from '@noble/secp256k1';\nimport { Base64DataBuffer } from '../serialization/base64';\nimport { Keypair } from './keypair';\nimport { PublicKey, SignatureScheme } from './publickey';\nimport { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Secp256k1PublicKey } from './secp256k1-publickey';\nimport { Signature } from '@noble/secp256k1';\n\nsecp.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach((msg) => h.update(msg));\n  return h.digest();\n};\n\n/**\n * Secp256k1 Keypair data\n */\nexport interface Secp256k1KeypairData {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An Secp256k1 Keypair used for signing transactions.\n */\nexport class Secp256k1Keypair implements Keypair {\n  private keypair: Secp256k1KeypairData;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Secp256k1Keypair} is provided.\n   *\n   * @param keypair secp256k1 keypair\n   */\n  constructor(keypair?: Secp256k1KeypairData) {\n    if (keypair) {\n      this.keypair = keypair;\n    } else {\n      const secretKey: Uint8Array = secp.utils.randomPrivateKey();\n      const publicKey: Uint8Array = secp.getPublicKey(secretKey, true);\n\n      this.keypair = { publicKey, secretKey };\n    }\n  }\n\n  /**\n   * Get the key scheme of the keypair Secp256k1\n   */\n  getKeyScheme(): SignatureScheme {\n    return 'Secp256k1';\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Secp256k1Keypair {\n    const secretKey = secp.utils.randomPrivateKey();\n    const publicKey = secp.getPublicKey(secretKey, true);\n\n    return new Secp256k1Keypair({ publicKey, secretKey });\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: { skipValidation?: boolean }\n  ): Secp256k1Keypair {\n    const publicKey: Uint8Array = secp.getPublicKey(secretKey, true);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('sui validation');\n      const msgHash = sha256(signData);\n      const signature = secp.signSync(msgHash, secretKey);\n      if (!secp.verify(signature, msgHash, publicKey, { strict: true })) {\n        throw new Error('Provided secretKey is invalid');\n      }\n    }\n    return new Secp256k1Keypair({ publicKey, secretKey });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Secp256k1Keypair {\n    let publicKey = secp.getPublicKey(seed, true);\n    return new Secp256k1Keypair({ publicKey, secretKey: seed });\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  getPublicKey(): PublicKey {\n    return new Secp256k1PublicKey(this.keypair.publicKey);\n  }\n\n  /**\n   * Return the signature for the provided data.\n   */\n  signData(data: Base64DataBuffer): Base64DataBuffer {\n    const msgHash = sha256(data.getData());\n    const [sig, rec_id] = secp.signSync(msgHash, this.keypair.secretKey, {\n      canonical: true,\n      recovered: true,\n    });\n    var recoverable_sig = new Uint8Array(65);\n    recoverable_sig.set(Signature.fromDER(sig).toCompactRawBytes());\n    recoverable_sig.set([rec_id], 64);\n    return new Base64DataBuffer(recoverable_sig);\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport sha3 from 'js-sha3';\nimport {\n  checkPublicKeyData,\n  PublicKey,\n  PublicKeyInitData,\n  SIGNATURE_SCHEME_TO_FLAG,\n} from './publickey';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey implements PublicKey {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new Secp256k1PublicKey object\n   * @param value secp256k1 public key as buffer or base-64 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    if (checkPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        const buffer = Buffer.from(value, 'base64');\n        if (buffer.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n          throw new Error(\n            `Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${buffer.length}`\n          );\n        }\n        this._bn = new BN(buffer);\n      } else {\n        this._bn = new BN(value);\n      }\n      let length = this._bn.byteLength();\n      if (length != SECP256K1_PUBLIC_KEY_SIZE) {\n        throw new Error(\n          `Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${length}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Checks if two Secp256k1 public keys are equal\n   */\n  equals(publicKey: Secp256k1PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-64 representation of the Secp256k1 public key\n   */\n  toBase64(): string {\n    return this.toBuffer().toString('base64');\n  }\n\n  /**\n   * Return the byte array representation of the Secp256k1 public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the Secp256k1 public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === SECP256K1_PUBLIC_KEY_SIZE) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(SECP256K1_PUBLIC_KEY_SIZE);\n    b.copy(zeroPad, SECP256K1_PUBLIC_KEY_SIZE - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-64 representation of the Secp256k1 public key\n   */\n  toString(): string {\n    return this.toBase64();\n  }\n\n  /**\n   * Return the Sui address associated with this Secp256k1 public key\n   */\n  toSuiAddress(): string {\n    let tmp = new Uint8Array(SECP256K1_PUBLIC_KEY_SIZE + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256k1']]);\n    tmp.set(this.toBytes(), 1);\n    return sha3.sha3_256(tmp).slice(0, 40);\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SignatureScheme } from '../cryptography/publickey';\nimport {\n  GetObjectDataResponse,\n  SuiObjectInfo,\n  GatewayTxSeqNumber,\n  GetTxnDigestsResponse,\n  SuiTransactionResponse,\n  SuiObjectRef,\n  SuiMoveFunctionArgTypes,\n  SuiMoveNormalizedFunction,\n  SuiMoveNormalizedStruct,\n  SuiMoveNormalizedModule,\n  SuiMoveNormalizedModules,\n  SuiEventFilter,\n  SuiEventEnvelope,\n  SubscriptionId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  TransactionDigest,\n  ObjectId,\n  SuiAddress,\n  ObjectOwner,\n  SuiEvents,\n} from '../types';\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class Provider {\n  // Objects\n  /**\n   * Get all objects owned by an address\n   */\n  abstract getObjectsOwnedByAddress(\n    addressOrObjectId: string\n  ): Promise<SuiObjectInfo[]>;\n\n  /**\n   * Convenience method for getting all gas objects(SUI Tokens) owned by an address\n   */\n  abstract getGasObjectsOwnedByAddress(\n    _address: string\n  ): Promise<SuiObjectInfo[]>;\n\n  /**\n   * Get details about an object\n   */\n  abstract getObject(objectId: string): Promise<GetObjectDataResponse>;\n\n  /**\n   * Get object reference(id, tx digest, version id)\n   * @param objectId\n   */\n  abstract getObjectRef(objectId: string): Promise<SuiObjectRef | undefined>;\n\n  // Transactions\n  /**\n   * Get transaction digests for a given range\n   *\n   * NOTE: this method may get deprecated after DevNet\n   */\n  abstract getTransactionDigestsInRange(\n    start: GatewayTxSeqNumber,\n    end: GatewayTxSeqNumber\n  ): Promise<GetTxnDigestsResponse>;\n\n  /**\n   * Get the latest `count` transactions\n   *\n   * NOTE: this method may get deprecated after DevNet\n   */\n  abstract getRecentTransactions(count: number): Promise<GetTxnDigestsResponse>;\n\n  /**\n   * Get total number of transactions\n   * NOTE: this method may get deprecated after DevNet\n   */\n  abstract getTotalTransactionNumber(): Promise<number>;\n\n  abstract executeTransaction(\n    txnBytes: string,\n    signatureScheme: SignatureScheme,\n    signature: string,\n    pubkey: string\n  ): Promise<SuiTransactionResponse>;\n\n  /**\n   * This is under development endpoint on Fullnode that will eventually\n   * replace the other `executeTransaction` that's only available on the\n   * Gateway\n   */\n  abstract executeTransactionWithRequestType(\n    txnBytes: string,\n    signatureScheme: SignatureScheme,\n    signature: string,\n    pubkey: string,\n    requestType: ExecuteTransactionRequestType\n  ): Promise<SuiExecuteTransactionResponse>;\n\n  // Move info\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  abstract getMoveFunctionArgTypes(\n    objectId: string,\n    moduleName: string,\n    functionName: string\n  ): Promise<SuiMoveFunctionArgTypes>;\n\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  abstract getNormalizedMoveModulesByPackage(\n    objectId: string\n  ): Promise<SuiMoveNormalizedModules>;\n\n  /**\n   * Get a structured representation of Move module\n   */\n  abstract getNormalizedMoveModule(\n    objectId: string,\n    moduleName: string\n  ): Promise<SuiMoveNormalizedModule>;\n\n  /**\n   * Get a structured representation of Move function\n   */\n  abstract getNormalizedMoveFunction(\n    objectId: string,\n    moduleName: string,\n    functionName: string\n  ): Promise<SuiMoveNormalizedFunction>;\n\n  /**\n   * Get a structured representation of Move struct\n   */\n  abstract getNormalizedMoveStruct(\n    objectId: string,\n    moduleName: string,\n    structName: string\n  ): Promise<SuiMoveNormalizedStruct>;\n\n  abstract syncAccountState(address: string): Promise<any>;\n\n  /**\n   * Get events for one transaction\n   * @param digest transaction digest to search by\n   * @param count max result count\n   */\n  abstract getEventsByTransaction(\n    digest: TransactionDigest,\n    count: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Get events emitted from within the specified Move module\n   * @param package_ Move package object ID\n   * @param module Move module name\n   * @param count max result count\n   * @param startTime start of time range\n   * @param endTime end of time range, exclusive\n   */\n  abstract getEventsByModule(\n    packageId: ObjectId,\n    module: string,\n    count: number,\n    startTime: number,\n    endTime: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Get events with a matching Move type name\n   * @param moveEventStructName Move struct type name\n   * @param count max result count\n   * @param startTime start of time range to search\n   * @param endTime end of time range\n   */\n  abstract getEventsByMoveEventStructName(\n    moveEventStructName: string,\n    count: number,\n    startTime: number,\n    endTime: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Get events from transactions sent by a specific address\n   * @param sender Sui address of the sender of the transaction that generated the event\n   * @param count max result count\n   * @param startTime start of time range to search\n   * @param endTime end of time range\n   */\n  abstract getEventsBySender(\n    sender: SuiAddress,\n    count: number,\n    startTime: number,\n    endTime: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Get events with a matching recipient\n   * @param recipient object owner that received the transaction that generated the event\n   * @param count max result count\n   * @param startTime start of time range to search\n   * @param endTime end of time range\n   */\n  abstract getEventsByRecipient(\n    recipient: ObjectOwner,\n    count: number,\n    startTime: number,\n    endTime: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Get events involving the given object\n   * @param object object id created, mutated, or deleted in events\n   * @param count max result count\n   * @param startTime start of time range to search\n   * @param endTime end of time range\n   */\n  abstract getEventsByObject(\n    object: ObjectId,\n    count: number,\n    startTime: number,\n    endTime: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Get all events within the given time span\n   * @param count max result count\n   * @param startTime start of time range to search\n   * @param endTime end of time range\n   */\n  abstract getEventsByTimeRange(\n    count: number,\n    startTime: number,\n    endTime: number\n  ): Promise<SuiEvents>;\n\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   * @param filter - filter describing the subset of events to follow\n   * @param onMessage - function to run when we receive a notification of a new event matching the filter\n   */\n  abstract subscribeEvent(\n    filter: SuiEventFilter,\n    onMessage: (event: SuiEventEnvelope) => void\n  ): Promise<SubscriptionId>;\n\n  /**\n   * Unsubscribe from an event subscription\n   * @param id - subscription id to unsubscribe from (previously received from subscribeEvent)\n   */\n  abstract unsubscribeEvent(id: SubscriptionId): Promise<boolean>;\n  // TODO: add more interface methods\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport RpcClient from 'jayson/lib/client/browser/index.js';\nimport fetch from 'cross-fetch';\nimport { isErrorResponse, isValidResponse } from './client.guard';\nimport * as LosslessJSON from 'lossless-json';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  method: string;\n  args: Array<any>;\n};\n\nconst TYPE_MISMATCH_ERROR =\n  `The response returned from RPC server does not match ` +\n  `the TypeScript definition. This is likely because the SDK version is not ` +\n  `compatible with the RPC server. Please update your SDK version to the latest. `;\n\nexport class JsonRpcClient {\n  private rpcClient: RpcClient;\n\n  constructor(url: string, httpHeaders?: HttpHeaders) {\n    this.rpcClient = this.createRpcClient(url, httpHeaders);\n  }\n\n  private createRpcClient(url: string, httpHeaders?: HttpHeaders): RpcClient {\n    const client = new RpcClient(\n      async (\n        request: any,\n        callback: (arg0: Error | null, arg1?: string | undefined) => void\n      ) => {\n        const options = {\n          method: 'POST',\n          body: request,\n          headers: Object.assign(\n            {\n              'Content-Type': 'application/json',\n            },\n            httpHeaders || {}\n          ),\n        };\n\n        try {\n          let res: Response = await fetch(url, options);\n          const text = await res.text();\n          const result = JSON.stringify(\n            LosslessJSON.parse(text, (key, value) => {\n              if (value == null) {\n                return value;\n              }\n\n              // TODO: This is a bad hack, we really shouldn't be doing this here:\n              if (key === 'balance' && typeof value === 'number') {\n                return value.toString();\n              }\n\n              try {\n                if (value.isLosslessNumber) return value.valueOf();\n              } catch {\n                return value.toString();\n              }\n              return value;\n            })\n          );\n          if (res.ok) {\n            callback(null, result);\n          } else {\n            callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n          }\n        } catch (err) {\n          if (err instanceof Error) callback(err);\n        }\n      },\n      {}\n    );\n\n    return client;\n  }\n\n  async requestWithType<T>(\n    method: string,\n    args: Array<any>,\n    isT: (val: any) => val is T,\n    skipDataValidation: boolean = false\n  ): Promise<T> {\n    const response = await this.request(method, args);\n    if (isErrorResponse(response)) {\n      throw new Error(`RPC Error: ${response.error.message}`);\n    } else if (isValidResponse(response)) {\n      const expectedSchema = isT(response.result);\n      const errMsg =\n        TYPE_MISMATCH_ERROR +\n        `Result received was: ${JSON.stringify(response.result)}`;\n\n      if (skipDataValidation && !expectedSchema) {\n        console.warn(errMsg);\n        return response.result;\n      } else if (!expectedSchema) {\n        throw new Error(`RPC Error: ${errMsg}`);\n      }\n      return response.result;\n    }\n    throw new Error(`Unexpected RPC Response: ${response}`);\n  }\n\n  async request(method: string, args: Array<any>): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.rpcClient.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  }\n\n  async batchRequestWithType<T>(\n    requests: RpcParams[],\n    isT: (val: any) => val is T,\n    skipDataValidation: boolean = false\n  ): Promise<T[]> {\n    const responses = await this.batchRequest(requests);\n    // TODO: supports other error modes such as throw or return\n    const validResponses = responses.filter(\n      (response: any) =>\n        isValidResponse(response) &&\n        (skipDataValidation || isT(response.result))\n    );\n\n    if (responses.length > validResponses.length) {\n      console.warn(\n        `Batch request contains invalid responses. ${\n          responses.length - validResponses.length\n        } of the ${responses.length} requests has invalid schema.`\n      );\n      const exampleTypeMismatch = responses.find((r: any) => !isT(r.result));\n      const exampleInvalidResponseIndex = responses.findIndex(\n        (r: any) => !isValidResponse(r)\n      );\n      if (exampleTypeMismatch) {\n        console.warn(\n          TYPE_MISMATCH_ERROR +\n            `One example mismatch is: ${JSON.stringify(\n              exampleTypeMismatch.result\n            )}`\n        );\n      }\n      if (exampleInvalidResponseIndex !== -1) {\n        console.warn(\n          `The request ${JSON.stringify(\n            requests[exampleInvalidResponseIndex]\n          )} within a batch request returns an invalid response ${JSON.stringify(\n            responses[exampleInvalidResponseIndex]\n          )}`\n        );\n      }\n    }\n\n    return validResponses.map((response: ValidResponse) => response.result);\n  }\n\n  async batchRequest(requests: RpcParams[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params) => {\n        return this.rpcClient.request(params.method, params.args);\n      });\n\n      this.rpcClient.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  }\n}\n\nexport type ValidResponse = {\n  jsonrpc: '2.0';\n  id: string;\n  result: any;\n};\n\nexport type ErrorResponse = {\n  jsonrpc: '2.0';\n  id: string;\n  error: {\n    code: any;\n    message: string;\n    data?: any;\n  };\n};\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable */\n\n/*\n * Generated type guards for \"client.ts\".\n * WARNING: Do not manually change this file.\n */\nimport { HttpHeaders, RpcParams, ValidResponse, ErrorResponse } from \"./client\";\n\nexport function isHttpHeaders(obj: any, _argumentName?: string): obj is HttpHeaders {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\")\n    )\n}\n\nexport function isRpcParams(obj: any, _argumentName?: string): obj is RpcParams {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        typeof obj.method === \"string\" &&\n        Array.isArray(obj.args)\n    )\n}\n\nexport function isValidResponse(obj: any, _argumentName?: string): obj is ValidResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        obj.jsonrpc === \"2.0\" &&\n        typeof obj.id === \"string\"\n    )\n}\n\nexport function isErrorResponse(obj: any, _argumentName?: string): obj is ErrorResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        obj.jsonrpc === \"2.0\" &&\n        typeof obj.id === \"string\" &&\n        (obj.error !== null &&\n            typeof obj.error === \"object\" ||\n            typeof obj.error === \"function\") &&\n        typeof obj.error.message === \"string\"\n    )\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable */\n\n/*\n * Generated type guards for \"index.ts\".\n * WARNING: Do not manually change this file.\n */\nimport { TransactionDigest, SuiAddress, ObjectOwner, SuiObjectRef, SuiObjectInfo, ObjectContentFields, MovePackageContent, SuiData, SuiMoveObject, SuiMovePackage, SuiMoveFunctionArgTypesResponse, SuiMoveFunctionArgType, SuiMoveFunctionArgTypes, SuiMoveNormalizedModules, SuiMoveNormalizedModule, SuiMoveModuleId, SuiMoveNormalizedStruct, SuiMoveStructTypeParameter, SuiMoveNormalizedField, SuiMoveNormalizedFunction, SuiMoveVisibility, SuiMoveTypeParameterIndex, SuiMoveAbilitySet, SuiMoveNormalizedType, SuiMoveNormalizedTypeParameterType, SuiMoveNormalizedStructType, SuiObject, ObjectStatus, ObjectType, GetOwnedObjectsResponse, GetObjectDataResponse, ObjectDigest, ObjectId, SequenceNumber, MoveEvent, PublishEvent, TransferObjectEvent, DeleteObjectEvent, NewObjectEvent, SuiEvent, MoveEventField, EventType, SuiEventFilter, SuiEventEnvelope, SuiEvents, SubscriptionId, SubscriptionEvent, TransferObject, SuiTransferSui, SuiChangeEpoch, ExecuteTransactionRequestType, TransactionKindName, SuiTransactionKind, SuiTransactionData, EpochId, GenericAuthoritySignature, AuthorityQuorumSignInfo, CertifiedTransaction, GasCostSummary, ExecutionStatusType, ExecutionStatus, OwnedObjectRef, TransactionEffects, SuiTransactionResponse, SuiCertifiedTransactionEffects, SuiExecuteTransactionResponse, GatewayTxSeqNumber, GetTxnDigestsResponse, MoveCall, SuiJsonValue, EmptySignInfo, AuthorityName, AuthoritySignature, TransactionBytes, SuiParsedMergeCoinResponse, SuiParsedSplitCoinResponse, SuiParsedPublishResponse, SuiPackage, SuiParsedTransactionResponse, DelegationData, DelegationSuiObject, TransferObjectTx, TransferSuiTx, PayTx, PublishTx, ObjectArg, CallArg, StructTag, TypeTag, MoveCallTx, Transaction, TransactionKind, TransactionData } from \"./index\";\n\nexport function isTransactionDigest(obj: any, _argumentName?: string): obj is TransactionDigest {\n    return (\n        typeof obj === \"string\"\n    )\n}\n\nexport function isSuiAddress(obj: any, _argumentName?: string): obj is SuiAddress {\n    return (\n        typeof obj === \"string\"\n    )\n}\n\nexport function isObjectOwner(obj: any, _argumentName?: string): obj is ObjectOwner {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isTransactionDigest(obj.AddressOwner) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.ObjectOwner) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.SingleOwner) as boolean ||\n            obj === \"Shared\" ||\n            obj === \"Immutable\")\n    )\n}\n\nexport function isSuiObjectRef(obj: any, _argumentName?: string): obj is SuiObjectRef {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.digest) as boolean &&\n        isTransactionDigest(obj.objectId) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\n    )\n}\n\nexport function isSuiObjectInfo(obj: any, _argumentName?: string): obj is SuiObjectInfo {\n    return (\n        isSuiObjectRef(obj) as boolean &&\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.type) as boolean &&\n        isObjectOwner(obj.owner) as boolean &&\n        isTransactionDigest(obj.previousTransaction) as boolean\n    )\n}\n\nexport function isObjectContentFields(obj: any, _argumentName?: string): obj is ObjectContentFields {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        Object.entries<any>(obj)\n            .every(([key, _value]) => (isTransactionDigest(key) as boolean))\n    )\n}\n\nexport function isMovePackageContent(obj: any, _argumentName?: string): obj is MovePackageContent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        Object.entries<any>(obj)\n            .every(([key, value]) => (isTransactionDigest(value) as boolean &&\n                isTransactionDigest(key) as boolean))\n    )\n}\n\nexport function isSuiData(obj: any, _argumentName?: string): obj is SuiData {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isObjectType(obj.dataType) as boolean &&\n            isSuiMoveObject(obj) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isObjectType(obj.dataType) as boolean &&\n            isSuiMovePackage(obj) as boolean)\n    )\n}\n\nexport function isSuiMoveObject(obj: any, _argumentName?: string): obj is SuiMoveObject {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.type) as boolean &&\n        isObjectContentFields(obj.fields) as boolean &&\n        (typeof obj.has_public_transfer === \"undefined\" ||\n            obj.has_public_transfer === false ||\n            obj.has_public_transfer === true)\n    )\n}\n\nexport function isSuiMovePackage(obj: any, _argumentName?: string): obj is SuiMovePackage {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isMovePackageContent(obj.disassembled) as boolean\n    )\n}\n\nexport function isSuiMoveFunctionArgTypesResponse(obj: any, _argumentName?: string): obj is SuiMoveFunctionArgTypesResponse {\n    return (\n        Array.isArray(obj) &&\n        obj.every((e: any) =>\n            isSuiMoveFunctionArgType(e) as boolean\n        )\n    )\n}\n\nexport function isSuiMoveFunctionArgType(obj: any, _argumentName?: string): obj is SuiMoveFunctionArgType {\n    return (\n        (isTransactionDigest(obj) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.Object) as boolean)\n    )\n}\n\nexport function isSuiMoveFunctionArgTypes(obj: any, _argumentName?: string): obj is SuiMoveFunctionArgTypes {\n    return (\n        Array.isArray(obj) &&\n        obj.every((e: any) =>\n            isSuiMoveFunctionArgType(e) as boolean\n        )\n    )\n}\n\nexport function isSuiMoveNormalizedModules(obj: any, _argumentName?: string): obj is SuiMoveNormalizedModules {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        Object.entries<any>(obj)\n            .every(([key, value]) => (isSuiMoveNormalizedModule(value) as boolean &&\n                isTransactionDigest(key) as boolean))\n    )\n}\n\nexport function isSuiMoveNormalizedModule(obj: any, _argumentName?: string): obj is SuiMoveNormalizedModule {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.file_format_version) as boolean &&\n        isTransactionDigest(obj.address) as boolean &&\n        isTransactionDigest(obj.name) as boolean &&\n        Array.isArray(obj.friends) &&\n        obj.friends.every((e: any) =>\n            isSuiMoveModuleId(e) as boolean\n        ) &&\n        (obj.structs !== null &&\n            typeof obj.structs === \"object\" ||\n            typeof obj.structs === \"function\") &&\n        Object.entries<any>(obj.structs)\n            .every(([key, value]) => (isSuiMoveNormalizedStruct(value) as boolean &&\n                isTransactionDigest(key) as boolean)) &&\n        (obj.exposed_functions !== null &&\n            typeof obj.exposed_functions === \"object\" ||\n            typeof obj.exposed_functions === \"function\") &&\n        Object.entries<any>(obj.exposed_functions)\n            .every(([key, value]) => (isSuiMoveNormalizedFunction(value) as boolean &&\n                isTransactionDigest(key) as boolean))\n    )\n}\n\nexport function isSuiMoveModuleId(obj: any, _argumentName?: string): obj is SuiMoveModuleId {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.address) as boolean &&\n        isTransactionDigest(obj.name) as boolean\n    )\n}\n\nexport function isSuiMoveNormalizedStruct(obj: any, _argumentName?: string): obj is SuiMoveNormalizedStruct {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveAbilitySet(obj.abilities) as boolean &&\n        Array.isArray(obj.type_parameters) &&\n        obj.type_parameters.every((e: any) =>\n            isSuiMoveStructTypeParameter(e) as boolean\n        ) &&\n        Array.isArray(obj.fields) &&\n        obj.fields.every((e: any) =>\n            isSuiMoveNormalizedField(e) as boolean\n        )\n    )\n}\n\nexport function isSuiMoveStructTypeParameter(obj: any, _argumentName?: string): obj is SuiMoveStructTypeParameter {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveAbilitySet(obj.constraints) as boolean &&\n        typeof obj.is_phantom === \"boolean\"\n    )\n}\n\nexport function isSuiMoveNormalizedField(obj: any, _argumentName?: string): obj is SuiMoveNormalizedField {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.name) as boolean &&\n        isSuiMoveNormalizedType(obj.type_) as boolean\n    )\n}\n\nexport function isSuiMoveNormalizedFunction(obj: any, _argumentName?: string): obj is SuiMoveNormalizedFunction {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveVisibility(obj.visibility) as boolean &&\n        typeof obj.is_entry === \"boolean\" &&\n        Array.isArray(obj.type_parameters) &&\n        obj.type_parameters.every((e: any) =>\n            isSuiMoveAbilitySet(e) as boolean\n        ) &&\n        Array.isArray(obj.parameters) &&\n        obj.parameters.every((e: any) =>\n            isSuiMoveNormalizedType(e) as boolean\n        ) &&\n        Array.isArray(obj.return_) &&\n        obj.return_.every((e: any) =>\n            isSuiMoveNormalizedType(e) as boolean\n        )\n    )\n}\n\nexport function isSuiMoveVisibility(obj: any, _argumentName?: string): obj is SuiMoveVisibility {\n    return (\n        (obj === \"Private\" ||\n            obj === \"Public\" ||\n            obj === \"Friend\")\n    )\n}\n\nexport function isSuiMoveTypeParameterIndex(obj: any, _argumentName?: string): obj is SuiMoveTypeParameterIndex {\n    return (\n        typeof obj === \"number\"\n    )\n}\n\nexport function isSuiMoveAbilitySet(obj: any, _argumentName?: string): obj is SuiMoveAbilitySet {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        Array.isArray(obj.abilities) &&\n        obj.abilities.every((e: any) =>\n            isTransactionDigest(e) as boolean\n        )\n    )\n}\n\nexport function isSuiMoveNormalizedType(obj: any, _argumentName?: string): obj is SuiMoveNormalizedType {\n    return (\n        (isTransactionDigest(obj) as boolean ||\n            isSuiMoveNormalizedTypeParameterType(obj) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiMoveNormalizedStructType(obj.Reference) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiMoveNormalizedStructType(obj.MutableReference) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiMoveNormalizedType(obj.Vector) as boolean ||\n            isSuiMoveNormalizedStructType(obj) as boolean)\n    )\n}\n\nexport function isSuiMoveNormalizedTypeParameterType(obj: any, _argumentName?: string): obj is SuiMoveNormalizedTypeParameterType {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.TypeParameter) as boolean\n    )\n}\n\nexport function isSuiMoveNormalizedStructType(obj: any, _argumentName?: string): obj is SuiMoveNormalizedStructType {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (obj.Struct !== null &&\n            typeof obj.Struct === \"object\" ||\n            typeof obj.Struct === \"function\") &&\n        isTransactionDigest(obj.Struct.address) as boolean &&\n        isTransactionDigest(obj.Struct.module) as boolean &&\n        isTransactionDigest(obj.Struct.name) as boolean &&\n        Array.isArray(obj.Struct.type_arguments) &&\n        obj.Struct.type_arguments.every((e: any) =>\n            isSuiMoveNormalizedTypeParameterType(e) as boolean\n        )\n    )\n}\n\nexport function isSuiObject(obj: any, _argumentName?: string): obj is SuiObject {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiData(obj.data) as boolean &&\n        isObjectOwner(obj.owner) as boolean &&\n        isTransactionDigest(obj.previousTransaction) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.storageRebate) as boolean &&\n        isSuiObjectRef(obj.reference) as boolean\n    )\n}\n\nexport function isObjectStatus(obj: any, _argumentName?: string): obj is ObjectStatus {\n    return (\n        (obj === \"Exists\" ||\n            obj === \"NotExists\" ||\n            obj === \"Deleted\")\n    )\n}\n\nexport function isObjectType(obj: any, _argumentName?: string): obj is ObjectType {\n    return (\n        (obj === \"moveObject\" ||\n            obj === \"package\")\n    )\n}\n\nexport function isGetOwnedObjectsResponse(obj: any, _argumentName?: string): obj is GetOwnedObjectsResponse {\n    return (\n        Array.isArray(obj) &&\n        obj.every((e: any) =>\n            isSuiObjectInfo(e) as boolean\n        )\n    )\n}\n\nexport function isGetObjectDataResponse(obj: any, _argumentName?: string): obj is GetObjectDataResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isObjectStatus(obj.status) as boolean &&\n        (isTransactionDigest(obj.details) as boolean ||\n            isSuiObjectRef(obj.details) as boolean ||\n            isSuiObject(obj.details) as boolean)\n    )\n}\n\nexport function isObjectDigest(obj: any, _argumentName?: string): obj is ObjectDigest {\n    return (\n        typeof obj === \"string\"\n    )\n}\n\nexport function isObjectId(obj: any, _argumentName?: string): obj is ObjectId {\n    return (\n        typeof obj === \"string\"\n    )\n}\n\nexport function isSequenceNumber(obj: any, _argumentName?: string): obj is SequenceNumber {\n    return (\n        typeof obj === \"number\"\n    )\n}\n\nexport function isMoveEvent(obj: any, _argumentName?: string): obj is MoveEvent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.packageId) as boolean &&\n        isTransactionDigest(obj.transactionModule) as boolean &&\n        isTransactionDigest(obj.sender) as boolean &&\n        isTransactionDigest(obj.type) as boolean &&\n        (typeof obj.fields === \"undefined\" ||\n            (obj.fields !== null &&\n                typeof obj.fields === \"object\" ||\n                typeof obj.fields === \"function\")) &&\n        isTransactionDigest(obj.bcs) as boolean\n    )\n}\n\nexport function isPublishEvent(obj: any, _argumentName?: string): obj is PublishEvent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.sender) as boolean &&\n        isTransactionDigest(obj.packageId) as boolean\n    )\n}\n\nexport function isTransferObjectEvent(obj: any, _argumentName?: string): obj is TransferObjectEvent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.packageId) as boolean &&\n        isTransactionDigest(obj.transactionModule) as boolean &&\n        isTransactionDigest(obj.sender) as boolean &&\n        isObjectOwner(obj.recipient) as boolean &&\n        isTransactionDigest(obj.objectId) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.version) as boolean &&\n        isTransactionDigest(obj.type) as boolean &&\n        (obj.amount === null ||\n            isSuiMoveTypeParameterIndex(obj.amount) as boolean)\n    )\n}\n\nexport function isDeleteObjectEvent(obj: any, _argumentName?: string): obj is DeleteObjectEvent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.packageId) as boolean &&\n        isTransactionDigest(obj.transactionModule) as boolean &&\n        isTransactionDigest(obj.sender) as boolean &&\n        isTransactionDigest(obj.objectId) as boolean\n    )\n}\n\nexport function isNewObjectEvent(obj: any, _argumentName?: string): obj is NewObjectEvent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.packageId) as boolean &&\n        isTransactionDigest(obj.transactionModule) as boolean &&\n        isTransactionDigest(obj.sender) as boolean &&\n        isObjectOwner(obj.recipient) as boolean &&\n        isTransactionDigest(obj.objectId) as boolean\n    )\n}\n\nexport function isSuiEvent(obj: any, _argumentName?: string): obj is SuiEvent {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isMoveEvent(obj.moveEvent) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isPublishEvent(obj.publish) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransferObjectEvent(obj.transferObject) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isDeleteObjectEvent(obj.deleteObject) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isNewObjectEvent(obj.newObject) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            typeof obj.epochChange === \"bigint\" ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            typeof obj.checkpoint === \"bigint\")\n    )\n}\n\nexport function isMoveEventField(obj: any, _argumentName?: string): obj is MoveEventField {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.path) as boolean &&\n        isSuiJsonValue(obj.value) as boolean\n    )\n}\n\nexport function isEventType(obj: any, _argumentName?: string): obj is EventType {\n    return (\n        (obj === \"MoveEvent\" ||\n            obj === \"Publish\" ||\n            obj === \"TransferObject\" ||\n            obj === \"DeleteObject\" ||\n            obj === \"NewObject\" ||\n            obj === \"EpochChange\" ||\n            obj === \"Checkpoint\")\n    )\n}\n\nexport function isSuiEventFilter(obj: any, _argumentName?: string): obj is SuiEventFilter {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isTransactionDigest(obj.Package) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.Module) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.MoveEventType) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isMoveEventField(obj.MoveEventField) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.SenderAddress) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isEventType(obj.EventType) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            Array.isArray(obj.All) &&\n            obj.All.every((e: any) =>\n                isSuiEventFilter(e) as boolean\n            ) ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            Array.isArray(obj.Any) &&\n            obj.Any.every((e: any) =>\n                isSuiEventFilter(e) as boolean\n            ) ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            Array.isArray(obj.And) &&\n            isSuiEventFilter(obj.And[0]) as boolean &&\n            isSuiEventFilter(obj.And[1]) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            Array.isArray(obj.Or) &&\n            isSuiEventFilter(obj.Or[0]) as boolean &&\n            isSuiEventFilter(obj.Or[1]) as boolean)\n    )\n}\n\nexport function isSuiEventEnvelope(obj: any, _argumentName?: string): obj is SuiEventEnvelope {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.timestamp) as boolean &&\n        isTransactionDigest(obj.txDigest) as boolean &&\n        isSuiEvent(obj.event) as boolean\n    )\n}\n\nexport function isSuiEvents(obj: any, _argumentName?: string): obj is SuiEvents {\n    return (\n        Array.isArray(obj) &&\n        obj.every((e: any) =>\n            isSuiEventEnvelope(e) as boolean\n        )\n    )\n}\n\nexport function isSubscriptionId(obj: any, _argumentName?: string): obj is SubscriptionId {\n    return (\n        typeof obj === \"number\"\n    )\n}\n\nexport function isSubscriptionEvent(obj: any, _argumentName?: string): obj is SubscriptionEvent {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.subscription) as boolean &&\n        isSuiEventEnvelope(obj.result) as boolean\n    )\n}\n\nexport function isTransferObject(obj: any, _argumentName?: string): obj is TransferObject {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.recipient) as boolean &&\n        isSuiObjectRef(obj.objectRef) as boolean\n    )\n}\n\nexport function isSuiTransferSui(obj: any, _argumentName?: string): obj is SuiTransferSui {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.recipient) as boolean &&\n        (obj.amount === null ||\n            isSuiMoveTypeParameterIndex(obj.amount) as boolean)\n    )\n}\n\nexport function isSuiChangeEpoch(obj: any, _argumentName?: string): obj is SuiChangeEpoch {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.epoch) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.storage_charge) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.computation_charge) as boolean\n    )\n}\n\nexport function isExecuteTransactionRequestType(obj: any, _argumentName?: string): obj is ExecuteTransactionRequestType {\n    return (\n        (obj === \"ImmediateReturn\" ||\n            obj === \"WaitForTxCert\" ||\n            obj === \"WaitForEffectsCert\")\n    )\n}\n\nexport function isTransactionKindName(obj: any, _argumentName?: string): obj is TransactionKindName {\n    return (\n        (obj === \"Publish\" ||\n            obj === \"TransferObject\" ||\n            obj === \"Call\" ||\n            obj === \"TransferSui\" ||\n            obj === \"ChangeEpoch\")\n    )\n}\n\nexport function isSuiTransactionKind(obj: any, _argumentName?: string): obj is SuiTransactionKind {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isTransferObject(obj.TransferObject) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiMovePackage(obj.Publish) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isMoveCall(obj.Call) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiTransferSui(obj.TransferSui) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiChangeEpoch(obj.ChangeEpoch) as boolean)\n    )\n}\n\nexport function isSuiTransactionData(obj: any, _argumentName?: string): obj is SuiTransactionData {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        Array.isArray(obj.transactions) &&\n        obj.transactions.every((e: any) =>\n            isSuiTransactionKind(e) as boolean\n        ) &&\n        isTransactionDigest(obj.sender) as boolean &&\n        isSuiObjectRef(obj.gasPayment) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.gasBudget) as boolean\n    )\n}\n\nexport function isEpochId(obj: any, _argumentName?: string): obj is EpochId {\n    return (\n        typeof obj === \"number\"\n    )\n}\n\nexport function isGenericAuthoritySignature(obj: any, _argumentName?: string): obj is GenericAuthoritySignature {\n    return (\n        (isTransactionDigest(obj) as boolean ||\n            Array.isArray(obj) &&\n            obj.every((e: any) =>\n                isTransactionDigest(e) as boolean\n            ))\n    )\n}\n\nexport function isAuthorityQuorumSignInfo(obj: any, _argumentName?: string): obj is AuthorityQuorumSignInfo {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.epoch) as boolean &&\n        isGenericAuthoritySignature(obj.signature) as boolean\n    )\n}\n\nexport function isCertifiedTransaction(obj: any, _argumentName?: string): obj is CertifiedTransaction {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.transactionDigest) as boolean &&\n        isSuiTransactionData(obj.data) as boolean &&\n        isTransactionDigest(obj.txSignature) as boolean &&\n        isAuthorityQuorumSignInfo(obj.authSignInfo) as boolean\n    )\n}\n\nexport function isGasCostSummary(obj: any, _argumentName?: string): obj is GasCostSummary {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.computationCost) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.storageCost) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.storageRebate) as boolean\n    )\n}\n\nexport function isExecutionStatusType(obj: any, _argumentName?: string): obj is ExecutionStatusType {\n    return (\n        (obj === \"success\" ||\n            obj === \"failure\")\n    )\n}\n\nexport function isExecutionStatus(obj: any, _argumentName?: string): obj is ExecutionStatus {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isExecutionStatusType(obj.status) as boolean &&\n        (typeof obj.error === \"undefined\" ||\n            isTransactionDigest(obj.error) as boolean)\n    )\n}\n\nexport function isOwnedObjectRef(obj: any, _argumentName?: string): obj is OwnedObjectRef {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isObjectOwner(obj.owner) as boolean &&\n        isSuiObjectRef(obj.reference) as boolean\n    )\n}\n\nexport function isTransactionEffects(obj: any, _argumentName?: string): obj is TransactionEffects {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isExecutionStatus(obj.status) as boolean &&\n        isGasCostSummary(obj.gasUsed) as boolean &&\n        (typeof obj.sharedObjects === \"undefined\" ||\n            Array.isArray(obj.sharedObjects) &&\n            obj.sharedObjects.every((e: any) =>\n                isSuiObjectRef(e) as boolean\n            )) &&\n        isTransactionDigest(obj.transactionDigest) as boolean &&\n        (typeof obj.created === \"undefined\" ||\n            Array.isArray(obj.created) &&\n            obj.created.every((e: any) =>\n                isOwnedObjectRef(e) as boolean\n            )) &&\n        (typeof obj.mutated === \"undefined\" ||\n            Array.isArray(obj.mutated) &&\n            obj.mutated.every((e: any) =>\n                isOwnedObjectRef(e) as boolean\n            )) &&\n        (typeof obj.unwrapped === \"undefined\" ||\n            Array.isArray(obj.unwrapped) &&\n            obj.unwrapped.every((e: any) =>\n                isOwnedObjectRef(e) as boolean\n            )) &&\n        (typeof obj.deleted === \"undefined\" ||\n            Array.isArray(obj.deleted) &&\n            obj.deleted.every((e: any) =>\n                isSuiObjectRef(e) as boolean\n            )) &&\n        (typeof obj.wrapped === \"undefined\" ||\n            Array.isArray(obj.wrapped) &&\n            obj.wrapped.every((e: any) =>\n                isSuiObjectRef(e) as boolean\n            )) &&\n        isOwnedObjectRef(obj.gasObject) as boolean &&\n        (typeof obj.events === \"undefined\" ||\n            Array.isArray(obj.events)) &&\n        (typeof obj.dependencies === \"undefined\" ||\n            Array.isArray(obj.dependencies) &&\n            obj.dependencies.every((e: any) =>\n                isTransactionDigest(e) as boolean\n            ))\n    )\n}\n\nexport function isSuiTransactionResponse(obj: any, _argumentName?: string): obj is SuiTransactionResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isCertifiedTransaction(obj.certificate) as boolean &&\n        isTransactionEffects(obj.effects) as boolean &&\n        (obj.timestamp_ms === null ||\n            isSuiMoveTypeParameterIndex(obj.timestamp_ms) as boolean) &&\n        (obj.parsed_data === null ||\n            (obj.parsed_data !== null &&\n                typeof obj.parsed_data === \"object\" ||\n                typeof obj.parsed_data === \"function\") &&\n            isSuiParsedSplitCoinResponse(obj.parsed_data.SplitCoin) as boolean ||\n            (obj.parsed_data !== null &&\n                typeof obj.parsed_data === \"object\" ||\n                typeof obj.parsed_data === \"function\") &&\n            isSuiParsedMergeCoinResponse(obj.parsed_data.MergeCoin) as boolean ||\n            (obj.parsed_data !== null &&\n                typeof obj.parsed_data === \"object\" ||\n                typeof obj.parsed_data === \"function\") &&\n            isSuiParsedPublishResponse(obj.parsed_data.Publish) as boolean)\n    )\n}\n\nexport function isSuiCertifiedTransactionEffects(obj: any, _argumentName?: string): obj is SuiCertifiedTransactionEffects {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionEffects(obj.effects) as boolean\n    )\n}\n\nexport function isSuiExecuteTransactionResponse(obj: any, _argumentName?: string): obj is SuiExecuteTransactionResponse {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            (obj.ImmediateReturn !== null &&\n                typeof obj.ImmediateReturn === \"object\" ||\n                typeof obj.ImmediateReturn === \"function\") &&\n            isTransactionDigest(obj.ImmediateReturn.tx_digest) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            (obj.TxCert !== null &&\n                typeof obj.TxCert === \"object\" ||\n                typeof obj.TxCert === \"function\") &&\n            isCertifiedTransaction(obj.TxCert.certificate) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            (obj.EffectsCert !== null &&\n                typeof obj.EffectsCert === \"object\" ||\n                typeof obj.EffectsCert === \"function\") &&\n            isCertifiedTransaction(obj.EffectsCert.certificate) as boolean &&\n            isSuiCertifiedTransactionEffects(obj.EffectsCert.effects) as boolean)\n    )\n}\n\nexport function isGatewayTxSeqNumber(obj: any, _argumentName?: string): obj is GatewayTxSeqNumber {\n    return (\n        typeof obj === \"number\"\n    )\n}\n\nexport function isGetTxnDigestsResponse(obj: any, _argumentName?: string): obj is GetTxnDigestsResponse {\n    return (\n        Array.isArray(obj) &&\n        obj.every((e: any) =>\n            Array.isArray(e) &&\n            isSuiMoveTypeParameterIndex(e[0]) as boolean &&\n            isTransactionDigest(e[1]) as boolean\n        )\n    )\n}\n\nexport function isMoveCall(obj: any, _argumentName?: string): obj is MoveCall {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiObjectRef(obj.package) as boolean &&\n        isTransactionDigest(obj.module) as boolean &&\n        isTransactionDigest(obj.function) as boolean &&\n        (typeof obj.typeArguments === \"undefined\" ||\n            Array.isArray(obj.typeArguments) &&\n            obj.typeArguments.every((e: any) =>\n                isTransactionDigest(e) as boolean\n            )) &&\n        (typeof obj.arguments === \"undefined\" ||\n            Array.isArray(obj.arguments) &&\n            obj.arguments.every((e: any) =>\n                isSuiJsonValue(e) as boolean\n            ))\n    )\n}\n\nexport function isSuiJsonValue(obj: any, _argumentName?: string): obj is SuiJsonValue {\n    return (\n        (isTransactionDigest(obj) as boolean ||\n            isSuiMoveTypeParameterIndex(obj) as boolean ||\n            obj === false ||\n            obj === true ||\n            Array.isArray(obj) &&\n            obj.every((e: any) =>\n                isSuiJsonValue(e) as boolean\n            ))\n    )\n}\n\nexport function isEmptySignInfo(obj: any, _argumentName?: string): obj is EmptySignInfo {\n    return (\n        typeof obj === \"object\"\n    )\n}\n\nexport function isAuthorityName(obj: any, _argumentName?: string): obj is AuthorityName {\n    return (\n        typeof obj === \"string\"\n    )\n}\n\nexport function isAuthoritySignature(obj: any, _argumentName?: string): obj is AuthoritySignature {\n    return (\n        typeof obj === \"string\"\n    )\n}\n\nexport function isTransactionBytes(obj: any, _argumentName?: string): obj is TransactionBytes {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.txBytes) as boolean &&\n        isSuiObjectRef(obj.gas) as boolean\n    )\n}\n\nexport function isSuiParsedMergeCoinResponse(obj: any, _argumentName?: string): obj is SuiParsedMergeCoinResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiObject(obj.updatedCoin) as boolean &&\n        isSuiObject(obj.updatedGas) as boolean\n    )\n}\n\nexport function isSuiParsedSplitCoinResponse(obj: any, _argumentName?: string): obj is SuiParsedSplitCoinResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isSuiObject(obj.updatedCoin) as boolean &&\n        Array.isArray(obj.newCoins) &&\n        obj.newCoins.every((e: any) =>\n            isSuiObject(e) as boolean\n        ) &&\n        isSuiObject(obj.updatedGas) as boolean\n    )\n}\n\nexport function isSuiParsedPublishResponse(obj: any, _argumentName?: string): obj is SuiParsedPublishResponse {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        Array.isArray(obj.createdObjects) &&\n        obj.createdObjects.every((e: any) =>\n            isSuiObject(e) as boolean\n        ) &&\n        isSuiPackage(obj.package) as boolean &&\n        isSuiObject(obj.updatedGas) as boolean\n    )\n}\n\nexport function isSuiPackage(obj: any, _argumentName?: string): obj is SuiPackage {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.digest) as boolean &&\n        isTransactionDigest(obj.objectId) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\n    )\n}\n\nexport function isSuiParsedTransactionResponse(obj: any, _argumentName?: string): obj is SuiParsedTransactionResponse {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isSuiParsedSplitCoinResponse(obj.SplitCoin) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiParsedMergeCoinResponse(obj.MergeCoin) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isSuiParsedPublishResponse(obj.Publish) as boolean)\n    )\n}\n\nexport function isDelegationData(obj: any, _argumentName?: string): obj is DelegationData {\n    return (\n        isSuiMoveObject(obj) as boolean &&\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isObjectType(obj.dataType) as boolean &&\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        obj.type === \"0x2::delegation::Delegation\" &&\n        (obj.fields !== null &&\n            typeof obj.fields === \"object\" ||\n            typeof obj.fields === \"function\") &&\n        (isSuiMoveTypeParameterIndex(obj.fields.active_delegation) as boolean ||\n            (obj.fields.active_delegation !== null &&\n                typeof obj.fields.active_delegation === \"object\" ||\n                typeof obj.fields.active_delegation === \"function\") &&\n            (obj.fields.active_delegation.fields !== null &&\n                typeof obj.fields.active_delegation.fields === \"object\" ||\n                typeof obj.fields.active_delegation.fields === \"function\") &&\n            obj.fields.active_delegation.fields.vec === \"\" &&\n            isTransactionDigest(obj.fields.active_delegation.type) as boolean) &&\n        isSuiMoveTypeParameterIndex(obj.fields.delegate_amount) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.fields.next_reward_unclaimed_epoch) as boolean &&\n        isTransactionDigest(obj.fields.validator_address) as boolean &&\n        (obj.fields.info !== null &&\n            typeof obj.fields.info === \"object\" ||\n            typeof obj.fields.info === \"function\") &&\n        isTransactionDigest(obj.fields.info.id) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.fields.info.version) as boolean &&\n        (isSuiMoveObject(obj.fields.coin_locked_until_epoch) as boolean ||\n            (obj.fields.coin_locked_until_epoch !== null &&\n                typeof obj.fields.coin_locked_until_epoch === \"object\" ||\n                typeof obj.fields.coin_locked_until_epoch === \"function\") &&\n            (obj.fields.coin_locked_until_epoch.fields !== null &&\n                typeof obj.fields.coin_locked_until_epoch.fields === \"object\" ||\n                typeof obj.fields.coin_locked_until_epoch.fields === \"function\") &&\n            obj.fields.coin_locked_until_epoch.fields.vec === \"\" &&\n            isTransactionDigest(obj.fields.coin_locked_until_epoch.type) as boolean) &&\n        (isSuiMoveTypeParameterIndex(obj.fields.ending_epoch) as boolean ||\n            (obj.fields.ending_epoch !== null &&\n                typeof obj.fields.ending_epoch === \"object\" ||\n                typeof obj.fields.ending_epoch === \"function\") &&\n            (obj.fields.ending_epoch.fields !== null &&\n                typeof obj.fields.ending_epoch.fields === \"object\" ||\n                typeof obj.fields.ending_epoch.fields === \"function\") &&\n            obj.fields.ending_epoch.fields.vec === \"\" &&\n            isTransactionDigest(obj.fields.ending_epoch.type) as boolean)\n    )\n}\n\nexport function isDelegationSuiObject(obj: any, _argumentName?: string): obj is DelegationSuiObject {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isObjectOwner(obj.owner) as boolean &&\n        isTransactionDigest(obj.previousTransaction) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.storageRebate) as boolean &&\n        isSuiObjectRef(obj.reference) as boolean &&\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isDelegationData(obj.data) as boolean\n    )\n}\n\nexport function isTransferObjectTx(obj: any, _argumentName?: string): obj is TransferObjectTx {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (obj.TransferObject !== null &&\n            typeof obj.TransferObject === \"object\" ||\n            typeof obj.TransferObject === \"function\") &&\n        isTransactionDigest(obj.TransferObject.recipient) as boolean &&\n        isSuiObjectRef(obj.TransferObject.object_ref) as boolean\n    )\n}\n\nexport function isTransferSuiTx(obj: any, _argumentName?: string): obj is TransferSuiTx {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (obj.TransferSui !== null &&\n            typeof obj.TransferSui === \"object\" ||\n            typeof obj.TransferSui === \"function\") &&\n        isTransactionDigest(obj.TransferSui.recipient) as boolean &&\n        ((obj.TransferSui.amount !== null &&\n            typeof obj.TransferSui.amount === \"object\" ||\n            typeof obj.TransferSui.amount === \"function\") &&\n            isSuiMoveTypeParameterIndex(obj.TransferSui.amount.Some) as boolean ||\n            (obj.TransferSui.amount !== null &&\n                typeof obj.TransferSui.amount === \"object\" ||\n                typeof obj.TransferSui.amount === \"function\") &&\n            obj.TransferSui.amount.None === null)\n    )\n}\n\nexport function isPayTx(obj: any, _argumentName?: string): obj is PayTx {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (obj.Pay !== null &&\n            typeof obj.Pay === \"object\" ||\n            typeof obj.Pay === \"function\") &&\n        Array.isArray(obj.Pay.input_coins) &&\n        obj.Pay.input_coins.every((e: any) =>\n            isTransactionDigest(e) as boolean\n        ) &&\n        Array.isArray(obj.Pay.recipients) &&\n        obj.Pay.recipients.every((e: any) =>\n            isTransactionDigest(e) as boolean\n        ) &&\n        Array.isArray(obj.Pay.amounts) &&\n        obj.Pay.amounts.every((e: any) =>\n            isSuiMoveTypeParameterIndex(e) as boolean\n        )\n    )\n}\n\nexport function isPublishTx(obj: any, _argumentName?: string): obj is PublishTx {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (obj.Publish !== null &&\n            typeof obj.Publish === \"object\" ||\n            typeof obj.Publish === \"function\") &&\n        (obj.Publish.modules !== null &&\n            typeof obj.Publish.modules === \"object\" ||\n            typeof obj.Publish.modules === \"function\") &&\n        isSuiMoveTypeParameterIndex(obj.Publish.modules.length) as boolean\n    )\n}\n\nexport function isObjectArg(obj: any, _argumentName?: string): obj is ObjectArg {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isSuiObjectRef(obj.ImmOrOwned) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTransactionDigest(obj.Shared) as boolean)\n    )\n}\n\nexport function isCallArg(obj: any, _argumentName?: string): obj is CallArg {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            (obj.Pure !== null &&\n                typeof obj.Pure === \"object\" ||\n                typeof obj.Pure === \"function\") &&\n            isSuiMoveTypeParameterIndex(obj.Pure.length) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isObjectArg(obj.Object) as boolean)\n    )\n}\n\nexport function isStructTag(obj: any, _argumentName?: string): obj is StructTag {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        isTransactionDigest(obj.address) as boolean &&\n        isTransactionDigest(obj.module) as boolean &&\n        isTransactionDigest(obj.name) as boolean &&\n        Array.isArray(obj.typeParams) &&\n        obj.typeParams.every((e: any) =>\n            isTypeTag(e) as boolean\n        )\n    )\n}\n\nexport function isTypeTag(obj: any, _argumentName?: string): obj is TypeTag {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            obj.bool === null ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            obj.u8 === null ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            obj.u64 === null ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            obj.u128 === null ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            obj.address === null ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            obj.signer === null ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isTypeTag(obj.vector) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            isStructTag(obj.struct) as boolean)\n    )\n}\n\nexport function isMoveCallTx(obj: any, _argumentName?: string): obj is MoveCallTx {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (obj.Call !== null &&\n            typeof obj.Call === \"object\" ||\n            typeof obj.Call === \"function\") &&\n        isSuiObjectRef(obj.Call.package) as boolean &&\n        isTransactionDigest(obj.Call.module) as boolean &&\n        isTransactionDigest(obj.Call.function) as boolean &&\n        Array.isArray(obj.Call.typeArguments) &&\n        obj.Call.typeArguments.every((e: any) =>\n            isTypeTag(e) as boolean\n        ) &&\n        Array.isArray(obj.Call.arguments) &&\n        obj.Call.arguments.every((e: any) =>\n            isCallArg(e) as boolean\n        )\n    )\n}\n\nexport function isTransaction(obj: any, _argumentName?: string): obj is Transaction {\n    return (\n        (isTransferObjectTx(obj) as boolean ||\n            isTransferSuiTx(obj) as boolean ||\n            isPayTx(obj) as boolean ||\n            isPublishTx(obj) as boolean ||\n            isMoveCallTx(obj) as boolean)\n    )\n}\n\nexport function isTransactionKind(obj: any, _argumentName?: string): obj is TransactionKind {\n    return (\n        ((obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n            isTransaction(obj.Single) as boolean ||\n            (obj !== null &&\n                typeof obj === \"object\" ||\n                typeof obj === \"function\") &&\n            Array.isArray(obj.Batch) &&\n            obj.Batch.every((e: any) =>\n                isTransaction(e) as boolean\n            ))\n    )\n}\n\nexport function isTransactionData(obj: any, _argumentName?: string): obj is TransactionData {\n    return (\n        (obj !== null &&\n            typeof obj === \"object\" ||\n            typeof obj === \"function\") &&\n        (typeof obj.sender === \"undefined\" ||\n            isTransactionDigest(obj.sender) as boolean) &&\n        isSuiMoveTypeParameterIndex(obj.gasBudget) as boolean &&\n        isSuiMoveTypeParameterIndex(obj.gasPrice) as boolean &&\n        isTransactionKind(obj.kind) as boolean &&\n        isSuiObjectRef(obj.gasPayment) as boolean\n    )\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Base64DataBuffer } from '../serialization/base64';\nimport { ObjectId } from './objects';\n\n/** Base64 string representing the object digest */\nexport type TransactionDigest = string;\nexport type SuiAddress = string;\nexport type ObjectOwner =\n  | { AddressOwner: SuiAddress }\n  | { ObjectOwner: SuiAddress }\n  | { SingleOwner: SuiAddress }\n  | 'Shared'\n  | 'Immutable';\n\n// source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L171\nconst TX_DIGEST_LENGTH = 32;\n// taken from https://rgxdb.com/r/1NUN74O6\nconst VALID_BASE64_REGEX =\n  /^(?:[a-zA-Z0-9+\\/]{4})*(?:|(?:[a-zA-Z0-9+\\/]{3}=)|(?:[a-zA-Z0-9+\\/]{2}==)|(?:[a-zA-Z0-9+\\/]{1}===))$/;\n\nexport function isValidTransactionDigest(\n  value: string\n): value is TransactionDigest {\n  return (\n    new Base64DataBuffer(value).getLength() === TX_DIGEST_LENGTH &&\n    VALID_BASE64_REGEX.test(value)\n  );\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 20;\nexport function isValidSuiAddress(value: string): value is SuiAddress {\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n  return isValidSuiAddress(value);\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(\n  value: string,\n  forceAdd0x: boolean = false\n): SuiAddress {\n  let address = value.toLowerCase();\n  if (!forceAdd0x && address.startsWith('0x')) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(\n  value: string,\n  forceAdd0x: boolean = false\n): ObjectId {\n  return normalizeSuiAddress(value, forceAdd0x);\n}\n\nfunction isHex(value: string): boolean {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ObjectOwner } from './common';\nimport { TransactionDigest } from './common';\n\nexport type SuiObjectRef = {\n  /** Base64 string representing the object digest */\n  digest: TransactionDigest;\n  /** Hex code as string representing the object id */\n  objectId: string;\n  /** Object version */\n  version: number;\n};\n\nexport type SuiObjectInfo = SuiObjectRef & {\n  type: string;\n  owner: ObjectOwner;\n  previousTransaction: TransactionDigest;\n};\n\nexport type ObjectContentFields = Record<string, any>;\n\nexport type MovePackageContent = Record<string, string>;\n\nexport type SuiData = { dataType: ObjectType } & (\n  | SuiMoveObject\n  | SuiMovePackage\n);\n\nexport type SuiMoveObject = {\n  /** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n  type: string;\n  /** Fields and values stored inside the Move object */\n  fields: ObjectContentFields;\n  has_public_transfer?: boolean;\n};\n\nexport type SuiMovePackage = {\n  /** A mapping from module name to disassembled Move bytecode */\n  disassembled: MovePackageContent;\n};\n\nexport type SuiMoveFunctionArgTypesResponse = SuiMoveFunctionArgType[];\n\nexport type SuiMoveFunctionArgType = string | { Object: string };\n\nexport type SuiMoveFunctionArgTypes = SuiMoveFunctionArgType[];\n\nexport type SuiMoveNormalizedModules = Record<string, SuiMoveNormalizedModule>;\n\nexport type SuiMoveNormalizedModule = {\n  file_format_version: number;\n  address: string;\n  name: string;\n  friends: SuiMoveModuleId[];\n  structs: Record<string, SuiMoveNormalizedStruct>;\n  exposed_functions: Record<string, SuiMoveNormalizedFunction>;\n};\n\nexport type SuiMoveModuleId = {\n  address: string;\n  name: string;\n};\n\nexport type SuiMoveNormalizedStruct = {\n  abilities: SuiMoveAbilitySet;\n  type_parameters: SuiMoveStructTypeParameter[];\n  fields: SuiMoveNormalizedField[];\n};\n\nexport type SuiMoveStructTypeParameter = {\n  constraints: SuiMoveAbilitySet;\n  is_phantom: boolean;\n};\n\nexport type SuiMoveNormalizedField = {\n  name: string;\n  type_: SuiMoveNormalizedType;\n};\n\nexport type SuiMoveNormalizedFunction = {\n  visibility: SuiMoveVisibility;\n  is_entry: boolean;\n  type_parameters: SuiMoveAbilitySet[];\n  parameters: SuiMoveNormalizedType[];\n  return_: SuiMoveNormalizedType[];\n};\n\nexport type SuiMoveVisibility = 'Private' | 'Public' | 'Friend';\n\nexport type SuiMoveTypeParameterIndex = number;\n\nexport type SuiMoveAbilitySet = {\n  abilities: string[];\n};\n\nexport type SuiMoveNormalizedType =\n  | string\n  | SuiMoveNormalizedTypeParameterType\n  | { Reference: SuiMoveNormalizedStructType }\n  | { MutableReference: SuiMoveNormalizedStructType }\n  | { Vector: SuiMoveNormalizedType }\n  | SuiMoveNormalizedStructType;\n\nexport type SuiMoveNormalizedTypeParameterType = {\n  TypeParameter: SuiMoveTypeParameterIndex;\n};\n\nexport type SuiMoveNormalizedStructType = {\n  Struct: {\n    address: string;\n    module: string;\n    name: string;\n    type_arguments: SuiMoveNormalizedTypeParameterType[];\n  };\n};\n\nexport type SuiObject = {\n  /** The meat of the object */\n  data: SuiData;\n  /** The owner of the object */\n  owner: ObjectOwner;\n  /** The digest of the transaction that created or last mutated this object */\n  previousTransaction: TransactionDigest;\n  /**\n   * The amount of SUI we would rebate if this object gets deleted.\n   * This number is re-calculated each time the object is mutated based on\n   * the present storage gas price.\n   */\n  storageRebate: number;\n  reference: SuiObjectRef;\n};\n\nexport type ObjectStatus = 'Exists' | 'NotExists' | 'Deleted';\nexport type ObjectType = 'moveObject' | 'package';\n\nexport type GetOwnedObjectsResponse = SuiObjectInfo[];\n\nexport type GetObjectDataResponse = {\n  status: ObjectStatus;\n  details: SuiObject | ObjectId | SuiObjectRef;\n};\n\nexport type ObjectDigest = string;\nexport type ObjectId = string;\nexport type SequenceNumber = number;\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------- GetObjectDataResponse ------------------------- */\n\nexport function getObjectExistsResponse(\n  resp: GetObjectDataResponse\n): SuiObject | undefined {\n  return resp.status !== 'Exists' ? undefined : (resp.details as SuiObject);\n}\n\nexport function getObjectDeletedResponse(\n  resp: GetObjectDataResponse\n): SuiObjectRef | undefined {\n  return resp.status !== 'Deleted' ? undefined : (resp.details as SuiObjectRef);\n}\n\nexport function getObjectNotExistsResponse(\n  resp: GetObjectDataResponse\n): ObjectId | undefined {\n  return resp.status !== 'NotExists' ? undefined : (resp.details as ObjectId);\n}\n\nexport function getObjectReference(\n  resp: GetObjectDataResponse\n): SuiObjectRef | undefined {\n  return (\n    getObjectExistsResponse(resp)?.reference || getObjectDeletedResponse(resp)\n  );\n}\n\n/* ------------------------------ SuiObjectRef ------------------------------ */\n\nexport function getObjectId(\n  data: GetObjectDataResponse | SuiObjectRef\n): ObjectId {\n  if ('objectId' in data) {\n    return data.objectId;\n  }\n  return (\n    getObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data)!\n  );\n}\n\nexport function getObjectVersion(\n  data: GetObjectDataResponse | SuiObjectRef\n): number | undefined {\n  if ('version' in data) {\n    return data.version;\n  }\n  return getObjectReference(data)?.version;\n}\n\n/* -------------------------------- SuiObject ------------------------------- */\n\nexport function getObjectType(\n  resp: GetObjectDataResponse\n): ObjectType | undefined {\n  return getObjectExistsResponse(resp)?.data.dataType;\n}\n\nexport function getObjectPreviousTransactionDigest(\n  resp: GetObjectDataResponse\n): TransactionDigest | undefined {\n  return getObjectExistsResponse(resp)?.previousTransaction;\n}\n\nexport function getObjectOwner(\n  resp: GetObjectDataResponse\n): ObjectOwner | undefined {\n  return getObjectExistsResponse(resp)?.owner;\n}\n\nexport function isSharedObject(resp: GetObjectDataResponse): boolean {\n  const owner = getObjectOwner(resp);\n  return owner === 'Shared';\n}\n\nexport function isImmutableObject(resp: GetObjectDataResponse): boolean {\n  const owner = getObjectOwner(resp);\n  return owner === 'Immutable';\n}\n\nexport function getMoveObjectType(\n  resp: GetObjectDataResponse\n): string | undefined {\n  return getMoveObject(resp)?.type;\n}\n\nexport function getObjectFields(\n  resp: GetObjectDataResponse | SuiMoveObject\n): ObjectContentFields | undefined {\n  if ('fields' in resp) {\n    return resp.fields;\n  }\n  return getMoveObject(resp)?.fields;\n}\n\nexport function getMoveObject(\n  data: GetObjectDataResponse | SuiObject\n): SuiMoveObject | undefined {\n  const suiObject = 'data' in data ? data : getObjectExistsResponse(data);\n  if (suiObject?.data.dataType !== 'moveObject') {\n    return undefined;\n  }\n  return suiObject.data as SuiMoveObject;\n}\n\nexport function hasPublicTransfer(\n  data: GetObjectDataResponse | SuiObject\n): boolean {\n  return getMoveObject(data)?.has_public_transfer ?? false;\n}\n\nexport function getMovePackageContent(\n  data: GetObjectDataResponse | SuiMovePackage\n): MovePackageContent | undefined {\n  if ('disassembled' in data) {\n    return data.disassembled;\n  }\n  const suiObject = getObjectExistsResponse(data);\n  if (suiObject?.data.dataType !== 'package') {\n    return undefined;\n  }\n  return (suiObject.data as SuiMovePackage).disassembled;\n}\n\nexport function extractMutableReference(\n  normalizedType: SuiMoveNormalizedType\n): SuiMoveNormalizedStructType | undefined {\n  return typeof normalizedType === 'object' &&\n    'MutableReference' in normalizedType\n    ? normalizedType.MutableReference\n    : undefined;\n}\n\nexport function extractReference(\n  normalizedType: SuiMoveNormalizedType\n): SuiMoveNormalizedStructType | undefined {\n  return typeof normalizedType === 'object' && 'Reference' in normalizedType\n    ? normalizedType.Reference\n    : undefined;\n}\n\nexport function extractStructTag(\n  normalizedType: SuiMoveNormalizedType\n): SuiMoveNormalizedStructType | undefined {\n  if (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n    return normalizedType;\n  }\n\n  return (\n    (extractReference(normalizedType) ||\n      extractMutableReference(normalizedType)) ??\n    undefined\n  );\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SuiAddress, ObjectOwner, TransactionDigest } from './common';\nimport { ObjectId, SequenceNumber } from './objects';\nimport { SuiJsonValue } from './transactions';\n\n// event types mirror those in \"sui-json-rpc-types/lib.rs\"\nexport type MoveEvent = {\n  packageId: ObjectId;\n  transactionModule: string;\n  sender: SuiAddress;\n  type: string;\n  fields?: { [key: string]: any };\n  bcs: string;\n};\n\nexport type PublishEvent = {\n  sender: SuiAddress;\n  packageId: ObjectId;\n};\n\nexport type TransferObjectEvent = {\n  packageId: ObjectId;\n  transactionModule: string;\n  sender: SuiAddress;\n  recipient: ObjectOwner;\n  objectId: ObjectId;\n  version: SequenceNumber;\n  type: string; // TODO - better type\n  amount: number | null;\n};\n\nexport type DeleteObjectEvent = {\n  packageId: ObjectId;\n  transactionModule: string;\n  sender: SuiAddress;\n  objectId: ObjectId;\n};\n\nexport type NewObjectEvent = {\n  packageId: ObjectId;\n  transactionModule: string;\n  sender: SuiAddress;\n  recipient: ObjectOwner;\n  objectId: ObjectId;\n};\n\nexport type SuiEvent =\n  | { moveEvent: MoveEvent }\n  | { publish: PublishEvent }\n  | { transferObject: TransferObjectEvent }\n  | { deleteObject: DeleteObjectEvent }\n  | { newObject: NewObjectEvent }\n  | { epochChange: bigint }\n  | { checkpoint: bigint };\n\nexport type MoveEventField = {\n  path: string;\n  value: SuiJsonValue;\n};\n\nexport type EventType =\n  | 'MoveEvent'\n  | 'Publish'\n  | 'TransferObject'\n  | 'DeleteObject'\n  | 'NewObject'\n  | 'EpochChange'\n  | 'Checkpoint';\n\n// mirrors sui_json_rpc_types::SuiEventFilter\nexport type SuiEventFilter =\n  | { Package: ObjectId }\n  | { Module: string }\n  | { MoveEventType: string }\n  | { MoveEventField: MoveEventField }\n  | { SenderAddress: SuiAddress }\n  | { EventType: EventType }\n  | { All: SuiEventFilter[] }\n  | { Any: SuiEventFilter[] }\n  | { And: [SuiEventFilter, SuiEventFilter] }\n  | { Or: [SuiEventFilter, SuiEventFilter] };\n\nexport type SuiEventEnvelope = {\n  timestamp: number;\n  txDigest: TransactionDigest;\n  event: SuiEvent;\n};\n\nexport type SuiEvents = SuiEventEnvelope[];\n\nexport type SubscriptionId = number;\n\nexport type SubscriptionEvent = {\n  subscription: SubscriptionId;\n  result: SuiEventEnvelope;\n};\n\n// mirrors the value defined in https://github.com/MystenLabs/sui/blob/e12f8c58ef7ba17205c4caf5ad2c350cbb01656c/crates/sui-json-rpc/src/api.rs#L27\nexport const EVENT_QUERY_MAX_LIMIT = 100;\nexport const DEFAULT_START_TIME = 0;\nexport const DEFAULT_END_TIME = Number.MAX_SAFE_INTEGER;\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ObjectOwner, SuiAddress, TransactionDigest } from './common';\nimport { SuiMovePackage, SuiObject, SuiObjectRef } from './objects';\n\nimport BN from 'bn.js';\n\nexport type TransferObject = {\n  recipient: SuiAddress;\n  objectRef: SuiObjectRef;\n};\n\nexport type SuiTransferSui = {\n  recipient: SuiAddress;\n  amount: number | null;\n};\n\nexport type SuiChangeEpoch = {\n  epoch: EpochId;\n  storage_charge: number;\n  computation_charge: number;\n};\n\nexport type ExecuteTransactionRequestType =\n  | 'ImmediateReturn'\n  | 'WaitForTxCert'\n  | 'WaitForEffectsCert';\n\nexport type TransactionKindName =\n  | 'TransferObject'\n  | 'Publish'\n  | 'Call'\n  | 'TransferSui'\n  | 'ChangeEpoch';\nexport type SuiTransactionKind =\n  | { TransferObject: TransferObject }\n  | { Publish: SuiMovePackage }\n  | { Call: MoveCall }\n  | { TransferSui: SuiTransferSui }\n  | { ChangeEpoch: SuiChangeEpoch };\nexport type SuiTransactionData = {\n  transactions: SuiTransactionKind[];\n  sender: SuiAddress;\n  gasPayment: SuiObjectRef;\n  gasBudget: number;\n};\n\n// TODO: support u64\nexport type EpochId = number;\nexport type GenericAuthoritySignature =\n  | AuthoritySignature[]\n  | AuthoritySignature;\n\nexport type AuthorityQuorumSignInfo = {\n  epoch: EpochId;\n  signature: GenericAuthoritySignature;\n};\n\nexport type CertifiedTransaction = {\n  transactionDigest: TransactionDigest;\n  data: SuiTransactionData;\n  txSignature: string;\n  authSignInfo: AuthorityQuorumSignInfo;\n};\n\nexport type GasCostSummary = {\n  computationCost: number;\n  storageCost: number;\n  storageRebate: number;\n};\n\nexport type ExecutionStatusType = 'success' | 'failure';\nexport type ExecutionStatus = {\n  status: ExecutionStatusType;\n  error?: string;\n};\n\n// TODO: change the tuple to struct from the server end\nexport type OwnedObjectRef = {\n  owner: ObjectOwner;\n  reference: SuiObjectRef;\n};\n\nexport type TransactionEffects = {\n  /** The status of the execution */\n  status: ExecutionStatus;\n  gasUsed: GasCostSummary;\n  /** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */\n  sharedObjects?: SuiObjectRef[];\n  /** The transaction digest */\n  transactionDigest: TransactionDigest;\n  /** ObjectRef and owner of new objects created */\n  created?: OwnedObjectRef[];\n  /** ObjectRef and owner of mutated objects, including gas object */\n  mutated?: OwnedObjectRef[];\n  /**\n   * ObjectRef and owner of objects that are unwrapped in this transaction.\n   * Unwrapped objects are objects that were wrapped into other objects in the past,\n   * and just got extracted out.\n   */\n  unwrapped?: OwnedObjectRef[];\n  /** Object Refs of objects now deleted (the old refs) */\n  deleted?: SuiObjectRef[];\n  /** Object refs of objects now wrapped in other objects */\n  wrapped?: SuiObjectRef[];\n  /**\n   * The updated gas object reference. Have a dedicated field for convenient access.\n   * It's also included in mutated.\n   */\n  gasObject: OwnedObjectRef;\n  /** The events emitted during execution. Note that only successful transactions emit events */\n  // TODO: properly define type when this is being used\n  events?: any[];\n  /** The set of transaction digests this transaction depends on */\n  dependencies?: TransactionDigest[];\n};\n\nexport type SuiTransactionResponse = {\n  certificate: CertifiedTransaction;\n  effects: TransactionEffects;\n  timestamp_ms: number | null;\n  parsed_data: SuiParsedTransactionResponse | null;\n};\n\n// TODO: this is likely to go away after https://github.com/MystenLabs/sui/issues/4207\nexport type SuiCertifiedTransactionEffects = {\n  effects: TransactionEffects;\n};\n\nexport type SuiExecuteTransactionResponse =\n  | {\n      ImmediateReturn: {\n        tx_digest: string;\n      };\n    }\n  | { TxCert: { certificate: CertifiedTransaction } }\n  | {\n      EffectsCert: {\n        certificate: CertifiedTransaction;\n        effects: SuiCertifiedTransactionEffects;\n      };\n    };\n\nexport type GatewayTxSeqNumber = number;\n\nexport type GetTxnDigestsResponse = [GatewayTxSeqNumber, TransactionDigest][];\n\nexport type MoveCall = {\n  package: SuiObjectRef;\n  module: string;\n  function: string;\n  typeArguments?: string[];\n  arguments?: SuiJsonValue[];\n};\n\nexport type SuiJsonValue = boolean | number | string | Array<SuiJsonValue>;\n\nexport type EmptySignInfo = object;\nexport type AuthorityName = string;\nexport type AuthoritySignature = string;\n\nexport type TransactionBytes = {\n  txBytes: string;\n  gas: SuiObjectRef;\n  // TODO: Add input_objects field\n};\n\nexport type SuiParsedMergeCoinResponse = {\n  updatedCoin: SuiObject;\n  updatedGas: SuiObject;\n};\n\nexport type SuiParsedSplitCoinResponse = {\n  updatedCoin: SuiObject;\n  newCoins: SuiObject[];\n  updatedGas: SuiObject;\n};\n\nexport type SuiParsedPublishResponse = {\n  createdObjects: SuiObject[];\n  package: SuiPackage;\n  updatedGas: SuiObject;\n};\n\nexport type SuiPackage = {\n  digest: string;\n  objectId: string;\n  version: number;\n};\n\nexport type SuiParsedTransactionResponse =\n  | {\n      SplitCoin: SuiParsedSplitCoinResponse;\n    }\n  | {\n      MergeCoin: SuiParsedMergeCoinResponse;\n    }\n  | {\n      Publish: SuiParsedPublishResponse;\n    };\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* ---------------------------------- CertifiedTransaction --------------------------------- */\nexport function getTransactionDigest(\n  tx: CertifiedTransaction\n): TransactionDigest {\n  return tx.transactionDigest;\n}\n\nexport function getTransactionSignature(tx: CertifiedTransaction): string {\n  return tx.txSignature;\n}\n\nexport function getTransactionAuthorityQuorumSignInfo(\n  tx: CertifiedTransaction\n): AuthorityQuorumSignInfo {\n  return tx.authSignInfo;\n}\n\nexport function getTransactionData(\n  tx: CertifiedTransaction\n): SuiTransactionData {\n  return tx.data;\n}\n\n/* ----------------------------- TransactionData ---------------------------- */\n\nexport function getTransactionSender(tx: CertifiedTransaction): SuiAddress {\n  return tx.data.sender;\n}\n\nexport function getTransactionGasObject(\n  tx: CertifiedTransaction\n): SuiObjectRef {\n  return tx.data.gasPayment;\n}\n\nexport function getTransactionGasBudget(tx: CertifiedTransaction): number {\n  return tx.data.gasBudget;\n}\n\nexport function getTransferObjectTransaction(\n  data: SuiTransactionKind\n): TransferObject | undefined {\n  return 'TransferObject' in data ? data.TransferObject : undefined;\n}\n\nexport function getPublishTransaction(\n  data: SuiTransactionKind\n): SuiMovePackage | undefined {\n  return 'Publish' in data ? data.Publish : undefined;\n}\n\nexport function getMoveCallTransaction(\n  data: SuiTransactionKind\n): MoveCall | undefined {\n  return 'Call' in data ? data.Call : undefined;\n}\n\nexport function getTransferSuiTransaction(\n  data: SuiTransactionKind\n): SuiTransferSui | undefined {\n  return 'TransferSui' in data ? data.TransferSui : undefined;\n}\n\nexport function getChangeEpochTransaction(\n  data: SuiTransactionKind\n): SuiChangeEpoch | undefined {\n  return 'ChangeEpoch' in data ? data.ChangeEpoch : undefined;\n}\n\nexport function getTransactions(\n  data: CertifiedTransaction\n): SuiTransactionKind[] {\n  return data.data.transactions;\n}\n\nexport function getTransferSuiAmount(data: SuiTransactionKind): BN | null {\n  return 'TransferSui' in data && data.TransferSui.amount\n    ? new BN.BN(data.TransferSui.amount, 10)\n    : null;\n}\n\nexport function getTransactionKindName(\n  data: SuiTransactionKind\n): TransactionKindName {\n  return Object.keys(data)[0] as TransactionKindName;\n}\n\n/* ----------------------------- ExecutionStatus ---------------------------- */\n\nexport function getExecutionStatusType(\n  data: SuiTransactionResponse\n): ExecutionStatusType {\n  return getExecutionStatus(data).status;\n}\n\nexport function getExecutionStatus(\n  data: SuiTransactionResponse\n): ExecutionStatus {\n  return data.effects.status;\n}\n\nexport function getExecutionStatusError(\n  data: SuiTransactionResponse\n): string | undefined {\n  return getExecutionStatus(data).error;\n}\n\nexport function getExecutionStatusGasSummary(\n  data: SuiTransactionResponse\n): GasCostSummary {\n  return data.effects.gasUsed;\n}\n\nexport function getTotalGasUsed(data: SuiTransactionResponse): number {\n  const gasSummary = getExecutionStatusGasSummary(data);\n  return (\n    gasSummary.computationCost +\n    gasSummary.storageCost -\n    gasSummary.storageRebate\n  );\n}\n\nexport function getTransactionEffects(\n  data: SuiExecuteTransactionResponse\n): TransactionEffects | undefined {\n  return 'EffectsCert' in data ? data.EffectsCert.effects.effects : undefined;\n}\n\n/* --------------------------- TransactionResponse -------------------------- */\n\nexport function getParsedSplitCoinResponse(\n  data: SuiTransactionResponse\n): SuiParsedSplitCoinResponse | undefined {\n  const parsed = data.parsed_data;\n  return parsed && 'SplitCoin' in parsed ? parsed.SplitCoin : undefined;\n}\n\nexport function getParsedMergeCoinResponse(\n  data: SuiTransactionResponse\n): SuiParsedMergeCoinResponse | undefined {\n  const parsed = data.parsed_data;\n  return parsed && 'MergeCoin' in parsed ? parsed.MergeCoin : undefined;\n}\n\nexport function getParsedPublishResponse(\n  data: SuiTransactionResponse\n): SuiParsedPublishResponse | undefined {\n  const parsed = data.parsed_data;\n  return parsed && 'Publish' in parsed ? parsed.Publish : undefined;\n}\n\n/**\n * Get the updated coin after a merge.\n * @param data the response for executing a merge coin transaction\n * @returns the updated state of the primary coin after the merge\n */\nexport function getCoinAfterMerge(\n  data: SuiTransactionResponse\n): SuiObject | undefined {\n  return getParsedMergeCoinResponse(data)?.updatedCoin;\n}\n\n/**\n * Get the updated coin after a split.\n * @param data the response for executing a Split coin transaction\n * @returns the updated state of the original coin object used for the split\n */\nexport function getCoinAfterSplit(\n  data: SuiTransactionResponse\n): SuiObject | undefined {\n  return getParsedSplitCoinResponse(data)?.updatedCoin;\n}\n\n/**\n * Get the newly created coin after a split.\n * @param data the response for executing a Split coin transaction\n * @returns the updated state of the original coin object used for the split\n */\nexport function getNewlyCreatedCoinsAfterSplit(\n  data: SuiTransactionResponse\n): SuiObject[] | undefined {\n  return getParsedSplitCoinResponse(data)?.newCoins;\n}\n\n/**\n * Get the newly created coin refs after a split.\n */\nexport function getNewlyCreatedCoinRefsAfterSplit(\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse\n): SuiObjectRef[] | undefined {\n  if ('EffectsCert' in data) {\n    const effects = data.EffectsCert.effects.effects;\n    return effects.created?.map((c) => c.reference);\n  }\n  return undefined;\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getObjectFields,\n  GetObjectDataResponse,\n  SuiMoveObject,\n  SuiObjectInfo,\n  SuiObject,\n  SuiData,\n  getMoveObjectType,\n} from './objects';\nimport { normalizeSuiObjectId, SuiAddress } from './common';\n\nimport BN from 'bn.js';\nimport { getOption, Option } from './option';\nimport { StructTag } from './sui-bcs';\n\nexport const COIN_PACKAGE_ID = '0x2';\nexport const COIN_MODULE_NAME = 'coin';\nexport const COIN_TYPE = `${COIN_PACKAGE_ID}::${COIN_MODULE_NAME}::Coin`;\nexport const COIN_SPLIT_VEC_FUNC_NAME = 'split_vec';\nexport const COIN_JOIN_FUNC_NAME = 'join';\nconst COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\n\ntype ObjectData = GetObjectDataResponse | SuiMoveObject | SuiObjectInfo;\n\n/**\n * Utility class for 0x2::coin\n * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4\n */\nexport class Coin {\n  static isCoin(data: ObjectData): boolean {\n    return Coin.getType(data)?.startsWith(COIN_TYPE) ?? false;\n  }\n\n  static getCoinTypeArg(obj: ObjectData) {\n    const res = Coin.getType(obj)?.match(COIN_TYPE_ARG_REGEX);\n    return res ? res[1] : null;\n  }\n\n  static isSUI(obj: ObjectData) {\n    const arg = Coin.getCoinTypeArg(obj);\n    return arg ? Coin.getCoinSymbol(arg) === 'SUI' : false;\n  }\n\n  static getCoinSymbol(coinTypeArg: string) {\n    return coinTypeArg.substring(coinTypeArg.lastIndexOf(':') + 1);\n  }\n\n  static getCoinStructTag(coinTypeArg: string): StructTag {\n    return {\n      address: normalizeSuiObjectId(coinTypeArg.split('::')[0]),\n      module: coinTypeArg.split('::')[1],\n      name: coinTypeArg.split('::')[2],\n      typeParams: [],\n    };\n  }\n\n  static getBalance(\n    data: GetObjectDataResponse | SuiMoveObject\n  ): BN | undefined {\n    if (!Coin.isCoin(data)) {\n      return undefined;\n    }\n    const balance = getObjectFields(data)?.balance;\n    return new BN.BN(balance, 10);\n  }\n\n  static getZero(): BN {\n    return new BN.BN('0', 10);\n  }\n\n  private static getType(data: ObjectData): string | undefined {\n    if ('status' in data) {\n      return getMoveObjectType(data);\n    }\n    return data.type;\n  }\n}\n\nexport type DelegationData = SuiMoveObject &\n  Pick<SuiData, 'dataType'> & {\n    type: '0x2::delegation::Delegation';\n    fields: {\n      active_delegation: Option<number>;\n      delegate_amount: number;\n      next_reward_unclaimed_epoch: number;\n      validator_address: SuiAddress;\n      info: {\n        id: string;\n        version: number;\n      };\n      coin_locked_until_epoch: Option<SuiMoveObject>;\n      ending_epoch: Option<number>;\n    };\n  };\n\nexport type DelegationSuiObject = Omit<SuiObject, 'data'> & {\n  data: DelegationData;\n};\n\n// Class for delegation.move\n// see https://github.com/MystenLabs/fastnft/blob/161aa27fe7eb8ecf2866ec9eb192e768f25da768/crates/sui-framework/sources/governance/delegation.move\nexport class Delegation {\n  public static readonly SUI_OBJECT_TYPE = '0x2::delegation::Delegation';\n  private suiObject: DelegationSuiObject;\n\n  public static isDelegationSuiObject(\n    obj: SuiObject\n  ): obj is DelegationSuiObject {\n    return 'type' in obj.data && obj.data.type === Delegation.SUI_OBJECT_TYPE;\n  }\n\n  constructor(obj: DelegationSuiObject) {\n    this.suiObject = obj;\n  }\n\n  public nextRewardUnclaimedEpoch() {\n    return this.suiObject.data.fields.next_reward_unclaimed_epoch;\n  }\n\n  public activeDelegation() {\n    return BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\n  }\n\n  public delegateAmount() {\n    return this.suiObject.data.fields.delegate_amount;\n  }\n\n  public endingEpoch() {\n    return getOption(this.suiObject.data.fields.ending_epoch);\n  }\n\n  public validatorAddress() {\n    return this.suiObject.data.fields.validator_address;\n  }\n\n  public isActive() {\n    return this.activeDelegation() > 0 && !this.endingEpoch();\n  }\n\n  public hasUnclaimedRewards(epoch: number) {\n    return (\n      this.nextRewardUnclaimedEpoch() <= epoch &&\n      (this.isActive() || (this.endingEpoch() || 0) > epoch)\n    );\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport type Option<T> =\n  | T\n  | {\n      fields: {\n        vec: '';\n      };\n      type: string;\n    };\n\nexport function getOption<T>(option: Option<T>): T | undefined {\n  if (\n    typeof option === 'object' &&\n    option !== null &&\n    'type' in option &&\n    option.type.startsWith('0x1::option::Option<')\n  ) {\n    return undefined;\n  }\n  return option as T;\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs, decodeStr, encodeStr } from '@mysten/bcs';\nimport { Buffer } from 'buffer';\nimport { SuiObjectRef } from './objects';\n\nbcs\n  .registerVectorType('vector<u8>', 'u8')\n  .registerVectorType('vector<u64>', 'u64')\n  .registerVectorType('vector<u128>', 'u128')\n  .registerVectorType('vector<vector<u8>>', 'vector<u8>')\n  .registerAddressType('ObjectID', 20)\n  .registerAddressType('SuiAddress', 20)\n  .registerAddressType('address', 20)\n  .registerType(\n    'utf8string',\n    (writer, str) => {\n      let bytes = Array.from(Buffer.from(str));\n      return writer.writeVec(bytes, (writer, el) => writer.write8(el));\n    },\n    (reader) => {\n      let bytes = reader.readVec((reader) => reader.read8());\n      return Buffer.from(bytes).toString('utf-8');\n    }\n  )\n  .registerType(\n    'ObjectDigest',\n    (writer, str) => {\n      let bytes = Array.from(decodeStr(str, 'base64'));\n      return writer.writeVec(bytes, (writer, el) => writer.write8(el));\n    },\n    (reader) => {\n      let bytes = reader.readVec((reader) => reader.read8());\n      return encodeStr(new Uint8Array(bytes), 'base64');\n    }\n  );\n\nbcs.registerStructType('SuiObjectRef', {\n  objectId: 'ObjectID',\n  version: 'u64',\n  digest: 'ObjectDigest',\n});\n\n/**\n * Transaction type used for transferring objects.\n * For this transaction to be executed, and `SuiObjectRef` should be queried\n * upfront and used as a parameter.\n */\nexport type TransferObjectTx = {\n  TransferObject: {\n    recipient: string;\n    object_ref: SuiObjectRef;\n  };\n};\n\nbcs.registerStructType('TransferObjectTx', {\n  recipient: 'SuiAddress',\n  object_ref: 'SuiObjectRef',\n});\n\n/**\n * Transaction type used for transferring Sui.\n */\nexport type TransferSuiTx = {\n  TransferSui: {\n    recipient: string;\n    amount: { Some: number } | { None: null };\n  };\n};\n\n/**\n * Transaction type used for Pay transaction.\n */\nexport type PayTx = {\n  Pay: {\n    input_coins: string[];\n    recipients: string[];\n    amounts: number[];\n  };\n};\n\nbcs.registerEnumType('Option<u64>', {\n  None: null,\n  Some: 'u64',\n});\n\nbcs.registerStructType('TransferSuiTx', {\n  recipient: 'SuiAddress',\n  amount: 'Option<u64>',\n});\n\n/**\n * Transaction type used for publishing Move modules to the Sui.\n * Should be already compiled using `sui-move`, example:\n * ```\n * $ sui-move build\n * $ cat build/project_name/bytecode_modules/module.mv\n * ```\n * In JS:\n * ```\n * let file = fs.readFileSync('./move/build/project_name/bytecode_modules/module.mv');\n * let bytes = Array.from(bytes);\n * let modules = [ bytes ];\n *\n * // ... publish logic ...\n * ```\n *\n * Each module should be represented as a sequence of bytes.\n */\nexport type PublishTx = {\n  Publish: {\n    modules: ArrayLike<ArrayLike<number>>;\n  };\n};\n\nbcs.registerStructType('PublishTx', {\n  modules: 'vector<vector<u8>>',\n});\n\n// ========== Move Call Tx ===========\n\n/**\n * An object argument.\n */\nexport type ObjectArg = { ImmOrOwned: SuiObjectRef } | { Shared: string };\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: '5460cf92b5e3e7067aaace60d88324095fd22944' } };\n * let arg2: CallArg = { Pure: bcs.set(bcs.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwnedObject: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg = { Pure: ArrayLike<number> } | { Object: ObjectArg };\n\nbcs\n  .registerEnumType('ObjectArg', {\n    ImmOrOwned: 'SuiObjectRef',\n    Shared: 'ObjectID',\n  })\n  .registerEnumType('CallArg', {\n    Pure: 'vector<u8>',\n    Object: 'ObjectArg',\n  });\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n  address: string;\n  module: string;\n  name: string;\n  typeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n  | { bool: null }\n  | { u8: null }\n  | { u64: null }\n  | { u128: null }\n  | { address: null }\n  | { signer: null }\n  | { vector: TypeTag }\n  | { struct: StructTag };\n\nbcs\n  .registerEnumType('TypeTag', {\n    bool: null,\n    u8: null,\n    u64: null,\n    u128: null,\n    address: null,\n    signer: null,\n    vector: 'TypeTag',\n    struct: 'StructTag',\n  })\n  .registerVectorType('vector<TypeTag>', 'TypeTag')\n  .registerStructType('StructTag', {\n    address: 'SuiAddress',\n    module: 'string',\n    name: 'string',\n    typeParams: 'vector<TypeTag>',\n  });\n\n/**\n * Transaction type used for calling Move modules' functions.\n * Should be crafted carefully, because the order of type parameters and\n * arguments matters.\n */\nexport type MoveCallTx = {\n  Call: {\n    package: SuiObjectRef;\n    module: string;\n    function: string;\n    typeArguments: TypeTag[];\n    arguments: CallArg[];\n  };\n};\n\nbcs\n  .registerVectorType('vector<CallArg>', 'CallArg')\n  .registerStructType('MoveCallTx', {\n    package: 'SuiObjectRef',\n    module: 'string',\n    function: 'string',\n    typeArguments: 'vector<TypeTag>',\n    arguments: 'vector<CallArg>',\n  });\n\n// ========== TransactionData ===========\n\nexport type Transaction =\n  | MoveCallTx\n  | PayTx\n  | PublishTx\n  | TransferObjectTx\n  | TransferSuiTx;\n\nbcs.registerEnumType('Transaction', {\n  TransferObject: 'TransferObjectTx',\n  Publish: 'PublishTx',\n  Call: 'MoveCallTx',\n  TransferSui: 'TransferSuiTx',\n});\n/**\n * Transaction kind - either Batch or Single.\n *\n * Can be improved to change serialization automatically based on\n * the passed value (single Transaction or an array).\n */\nexport type TransactionKind =\n  | { Single: Transaction }\n  | { Batch: Transaction[] };\n\nbcs\n  .registerVectorType('vector<Transaction>', 'Transaction')\n  .registerEnumType('TransactionKind', {\n    Single: 'Transaction',\n    Batch: 'vector<Transaction>',\n  });\n\n/**\n * The TransactionData to be signed and sent to the Gateway service.\n *\n * Field `sender` is made optional as it can be added during the signing\n * process and there's no need to define it sooner.\n */\nexport type TransactionData = {\n  sender?: string; //\n  gasBudget: number;\n  gasPrice: number;\n  kind: TransactionKind;\n  gasPayment: SuiObjectRef;\n};\n\nbcs.registerStructType('TransactionData', {\n  kind: 'TransactionKind',\n  sender: 'SuiAddress',\n  gasPayment: 'SuiObjectRef',\n  gasPrice: 'u64',\n  gasBudget: 'u64',\n});\n\nexport { bcs };\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isSubscriptionEvent } from '../types/index.guard';\nimport { SuiEventFilter, SuiEventEnvelope, SubscriptionId } from '../types';\nimport { Client as WsRpcClient } from 'rpc-websockets';\n\nexport const getWebsocketUrl = (httpUrl: string, port?: number): string => {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace('http', 'ws');\n  url.port = (port ?? 9001).toString();\n  return url.toString();\n};\n\nenum ConnectionState {\n  NotConnected,\n  Connecting,\n  Connected,\n}\n\ntype JsonRpcMethodMessage<T> = {\n  jsonrpc: '2.0';\n  method: string;\n  params: T;\n};\n\ntype FilterSubHandler = {\n  id: SubscriptionId;\n  onMessage: (event: SuiEventEnvelope) => void;\n  filter: SuiEventFilter;\n};\n\ntype SubscriptionData = {\n  filter: SuiEventFilter;\n  onMessage: (event: SuiEventEnvelope) => void;\n};\n\ntype MinimumSubscriptionMessage = {\n  subscription: SubscriptionId;\n  result: object;\n};\n\nconst isMinimumSubscriptionMessage = (\n  msg: any\n): msg is MinimumSubscriptionMessage =>\n  msg &&\n  'subscription' in msg &&\n  typeof msg['subscription'] === 'number' &&\n  'result' in msg &&\n  typeof msg['result'] === 'object';\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n  /**\n   * Milliseconds before timing out while initially connecting\n   */\n  connectTimeout: number;\n  /**\n   * Milliseconds before timing out while calling an RPC method\n   */\n  callTimeout: number;\n  /**\n   * Milliseconds between attempts to connect\n   */\n  reconnectInterval: number;\n  /**\n   * Maximum number of times to try connecting before giving up\n   */\n  maxReconnects: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS: WebsocketClientOptions = {\n  connectTimeout: 15000,\n  callTimeout: 30000,\n  reconnectInterval: 3000,\n  maxReconnects: 5,\n};\n\nconst SUBSCRIBE_EVENT_METHOD = 'sui_subscribeEvent';\nconst UNSUBSCRIBE_EVENT_METHOD = 'sui_unsubscribeEvent';\n\n/**\n * Interface with a Sui node's websocket capabilities\n */\nexport class WebsocketClient {\n  protected rpcClient: WsRpcClient;\n  protected connectionState: ConnectionState = ConnectionState.NotConnected;\n  protected connectionTimeout: number | null = null;\n  protected isSetup: boolean = false;\n  private connectionPromise: Promise<void> | null = null;\n\n  protected eventSubscriptions: Map<SubscriptionId, SubscriptionData> =\n    new Map();\n\n  /**\n   * @param endpoint Sui node endpoint to connect to (accepts websocket & http)\n   * @param skipValidation If `true`, the rpc client will not check if the responses\n   * from the RPC server conform to the schema defined in the TypeScript SDK\n   * @param options Configuration options, such as timeouts & connection behavior\n   */\n  constructor(\n    public endpoint: string,\n    public skipValidation: boolean,\n    public options: WebsocketClientOptions = DEFAULT_CLIENT_OPTIONS\n  ) {\n    if (this.endpoint.startsWith('http'))\n      this.endpoint = getWebsocketUrl(this.endpoint);\n\n    this.rpcClient = new WsRpcClient(this.endpoint, {\n      reconnect_interval: this.options.reconnectInterval,\n      max_reconnects: this.options.maxReconnects,\n      autoconnect: false,\n    });\n  }\n\n  private setupSocket() {\n    if (this.isSetup) return;\n\n    this.rpcClient.on('open', () => {\n      if (this.connectionTimeout) {\n        clearTimeout(this.connectionTimeout);\n        this.connectionTimeout = null;\n      }\n      this.connectionState = ConnectionState.Connected;\n      // underlying websocket is private, but we need it\n      // to access messages sent by the node\n      (this.rpcClient as any).socket.on(\n        'message',\n        this.onSocketMessage.bind(this)\n      );\n    });\n\n    this.rpcClient.on('close', () => {\n      this.connectionState = ConnectionState.NotConnected;\n    });\n\n    this.rpcClient.on('error', console.error);\n    this.isSetup = true;\n  }\n\n  // called for every message received from the node over websocket\n  private onSocketMessage(rawMessage: string): void {\n    const msg: JsonRpcMethodMessage<object> = JSON.parse(rawMessage);\n\n    const params = msg.params;\n    if (msg.method === SUBSCRIBE_EVENT_METHOD) {\n      // even with validation off, we must ensure a few properties at minimum in a message\n      if (this.skipValidation && isMinimumSubscriptionMessage(params)) {\n        const sub = this.eventSubscriptions.get(params.subscription);\n        if (sub)\n          // cast to bypass type validation of 'result'\n          (sub.onMessage as (m: any) => void)(params.result);\n      } else if (isSubscriptionEvent(params)) {\n        // call any registered handler for the message's subscription\n        const sub = this.eventSubscriptions.get(params.subscription);\n        if (sub) sub.onMessage(params.result);\n      }\n    }\n  }\n\n  private async connect(): Promise<void> {\n    // if the last attempt to connect hasn't finished, wait on it\n    if (this.connectionPromise) return this.connectionPromise;\n    if (this.connectionState === ConnectionState.Connected)\n      return Promise.resolve();\n\n    this.setupSocket();\n    this.rpcClient.connect();\n    this.connectionState = ConnectionState.Connecting;\n\n    this.connectionPromise = new Promise<void>((resolve, reject) => {\n      this.connectionTimeout = setTimeout(\n        () => reject(new Error('timeout')),\n        this.options.connectTimeout\n      ) as any as number;\n\n      this.rpcClient.once('open', () => {\n        this.refreshSubscriptions();\n        this.connectionPromise = null;\n        resolve();\n      });\n      this.rpcClient.once('error', (err) => {\n        this.connectionPromise = null;\n        reject(err);\n      });\n    });\n    return this.connectionPromise;\n  }\n\n  /**\n    call only upon reconnecting to a node over websocket.\n    calling multiple times on the same connection will result\n    in multiple message handlers firing each time\n  */\n  private async refreshSubscriptions() {\n    if (this.eventSubscriptions.size === 0) return;\n\n    try {\n      let newSubs: Map<SubscriptionId, SubscriptionData> = new Map();\n\n      let newSubsArr: (FilterSubHandler | null)[] = await Promise.all(\n        Array.from(this.eventSubscriptions.values()).map(async (sub) => {\n          const onMessage = sub.onMessage;\n          const filter = sub.filter;\n          if (!filter || !onMessage) return Promise.resolve(null);\n          /**\n            re-subscribe to the same filter & replace the subscription id.\n            we skip calling sui_unsubscribeEvent for the old sub id, because:\n              * we assume this is being called after a reconnection\n              * the node keys subscriptions with a combo of connection id & subscription id\n          */\n          const id = await this.subscribeEvent(filter, onMessage);\n          return { id, onMessage, filter };\n        })\n      );\n\n      newSubsArr.forEach((entry) => {\n        if (entry === null) return;\n        const filter = entry.filter;\n        const onMessage = entry.onMessage;\n        newSubs.set(entry.id, { filter, onMessage });\n      });\n\n      this.eventSubscriptions = newSubs;\n    } catch (err) {\n      throw new Error(`error refreshing event subscriptions: ${err}`);\n    }\n  }\n\n  async subscribeEvent(\n    filter: SuiEventFilter,\n    onMessage: (event: SuiEventEnvelope) => void\n  ): Promise<SubscriptionId> {\n    try {\n      // lazily connect to websocket to avoid spamming node with connections\n      if (this.connectionState != ConnectionState.Connected)\n        await this.connect();\n\n      let subId = (await this.rpcClient.call(\n        SUBSCRIBE_EVENT_METHOD,\n        [filter],\n        this.options.callTimeout\n      )) as SubscriptionId;\n\n      this.eventSubscriptions.set(subId, { filter, onMessage });\n      return subId;\n    } catch (err) {\n      throw new Error(\n        `Error subscribing to event: ${err}, filter: ${JSON.stringify(filter)}`\n      );\n    }\n  }\n\n  async unsubscribeEvent(id: SubscriptionId): Promise<boolean> {\n    try {\n      if (this.connectionState != ConnectionState.Connected)\n        await this.connect();\n\n      let removedOnNode = (await this.rpcClient.call(\n        UNSUBSCRIBE_EVENT_METHOD,\n        [id],\n        this.options.callTimeout\n      )) as boolean;\n      /**\n        if the connection closes before unsubscribe is called,\n        the remote node will remove us from its subscribers list without notification,\n        leading to removedOnNode being false. but if we still had a record of it locally,\n        we should still report that it was deleted successfully\n      */\n      return this.eventSubscriptions.delete(id) || removedOnNode;\n    } catch (err) {\n      throw new Error(\n        `Error unsubscribing from event: ${err}, subscription: ${id}}`\n      );\n    }\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Provider } from './provider';\nimport { JsonRpcClient } from '../rpc/client';\nimport {\n  isGetObjectDataResponse,\n  isGetOwnedObjectsResponse,\n  isGetTxnDigestsResponse,\n  isSuiTransactionResponse,\n  isSuiMoveFunctionArgTypes,\n  isSuiMoveNormalizedModules,\n  isSuiMoveNormalizedModule,\n  isSuiMoveNormalizedFunction,\n  isSuiMoveNormalizedStruct,\n  isSuiExecuteTransactionResponse,\n  isSuiEvents,\n} from '../types/index.guard';\nimport {\n  GatewayTxSeqNumber,\n  GetTxnDigestsResponse,\n  GetObjectDataResponse,\n  SuiObjectInfo,\n  SuiMoveFunctionArgTypes,\n  SuiMoveNormalizedModules,\n  SuiMoveNormalizedModule,\n  SuiMoveNormalizedFunction,\n  SuiMoveNormalizedStruct,\n  TransactionDigest,\n  SuiTransactionResponse,\n  SuiObjectRef,\n  getObjectReference,\n  Coin,\n  SuiEventFilter,\n  SuiEventEnvelope,\n  SubscriptionId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  SuiAddress,\n  ObjectOwner,\n  ObjectId,\n  SuiEvents,\n  EVENT_QUERY_MAX_LIMIT,\n  DEFAULT_START_TIME,\n  DEFAULT_END_TIME,\n} from '../types';\nimport { SignatureScheme } from '../cryptography/publickey';\nimport {\n  DEFAULT_CLIENT_OPTIONS,\n  WebsocketClient,\n  WebsocketClientOptions,\n} from '../rpc/websocket-client';\n\nconst isNumber = (val: any): val is number => typeof val === 'number';\nconst isAny = (_val: any): _val is any => true;\n\nexport class JsonRpcProvider extends Provider {\n  protected client: JsonRpcClient;\n  protected wsClient: WebsocketClient;\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param endpoint URL to the Sui RPC endpoint\n   * @param skipDataValidation default to `false`. If set to `true`, the rpc\n   * client will not check if the responses from the RPC server conform to the schema\n   * defined in the TypeScript SDK. The mismatches often happen when the SDK\n   * is in a different version than the RPC server. Skipping the validation\n   * can maximize the version compatibility of the SDK, as not all the schema\n   * changes in the RPC response will affect the caller, but the caller needs to\n   * understand that the data may not match the TypeSrcript definitions.\n   */\n  constructor(\n    public endpoint: string,\n    public skipDataValidation: boolean = false,\n    public socketOptions: WebsocketClientOptions = DEFAULT_CLIENT_OPTIONS\n  ) {\n    super();\n\n    this.client = new JsonRpcClient(endpoint);\n    this.wsClient = new WebsocketClient(\n      endpoint,\n      skipDataValidation,\n      socketOptions\n    );\n  }\n\n  // Move info\n  async getMoveFunctionArgTypes(\n    objectId: string,\n    moduleName: string,\n    functionName: string\n  ): Promise<SuiMoveFunctionArgTypes> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getMoveFunctionArgTypes',\n        [objectId, moduleName, functionName],\n        isSuiMoveFunctionArgTypes,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching Move function arg types with package object ID: ${objectId}, module name: ${moduleName}, function name: ${functionName}`\n      );\n    }\n  }\n\n  async getNormalizedMoveModulesByPackage(\n    objectId: string\n  ): Promise<SuiMoveNormalizedModules> {\n    // TODO: Add caching since package object does not change\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveModulesByPackage',\n        [objectId],\n        isSuiMoveNormalizedModules,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(`Error fetching package: ${err} for package ${objectId}`);\n    }\n  }\n\n  async getNormalizedMoveModule(\n    objectId: string,\n    moduleName: string\n  ): Promise<SuiMoveNormalizedModule> {\n    // TODO: Add caching since package object does not change\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveModule',\n        [objectId, moduleName],\n        isSuiMoveNormalizedModule,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching module: ${err} for package ${objectId}, module ${moduleName}}`\n      );\n    }\n  }\n\n  async getNormalizedMoveFunction(\n    objectId: string,\n    moduleName: string,\n    functionName: string\n  ): Promise<SuiMoveNormalizedFunction> {\n    // TODO: Add caching since package object does not change\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveFunction',\n        [objectId, moduleName, functionName],\n        isSuiMoveNormalizedFunction,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching function: ${err} for package ${objectId}, module ${moduleName} and function ${functionName}}`\n      );\n    }\n  }\n\n  async getNormalizedMoveStruct(\n    objectId: string,\n    moduleName: string,\n    structName: string\n  ): Promise<SuiMoveNormalizedStruct> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveStruct',\n        [objectId, moduleName, structName],\n        isSuiMoveNormalizedStruct,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching struct: ${err} for package ${objectId}, module ${moduleName} and struct ${structName}}`\n      );\n    }\n  }\n\n  // Objects\n  async getObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getObjectsOwnedByAddress',\n        [address],\n        isGetOwnedObjectsResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching owned object: ${err} for address ${address}`\n      );\n    }\n  }\n\n  async getGasObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\n    const objects = await this.getObjectsOwnedByAddress(address);\n    return objects.filter((obj: SuiObjectInfo) => Coin.isSUI(obj));\n  }\n\n  async getObjectsOwnedByObject(objectId: string): Promise<SuiObjectInfo[]> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getObjectsOwnedByObject',\n        [objectId],\n        isGetOwnedObjectsResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching owned object: ${err} for objectId ${objectId}`\n      );\n    }\n  }\n\n  async getObject(objectId: string): Promise<GetObjectDataResponse> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getObject',\n        [objectId],\n        isGetObjectDataResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(`Error fetching object info: ${err} for id ${objectId}`);\n    }\n  }\n\n  async getObjectRef(objectId: string): Promise<SuiObjectRef | undefined> {\n    const resp = await this.getObject(objectId);\n    return getObjectReference(resp);\n  }\n\n  async getObjectBatch(objectIds: string[]): Promise<GetObjectDataResponse[]> {\n    const requests = objectIds.map((id) => ({\n      method: 'sui_getObject',\n      args: [id],\n    }));\n    try {\n      return await this.client.batchRequestWithType(\n        requests,\n        isGetObjectDataResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(`Error fetching object info: ${err} for id ${objectIds}`);\n    }\n  }\n\n  // Transactions\n\n  async getTransactionsForObject(\n    objectID: string\n  ): Promise<GetTxnDigestsResponse> {\n    const requests = [\n      {\n        method: 'sui_getTransactionsByInputObject',\n        args: [objectID],\n      },\n      {\n        method: 'sui_getTransactionsByMutatedObject',\n        args: [objectID],\n      },\n    ];\n\n    try {\n      const results = await this.client.batchRequestWithType(\n        requests,\n        isGetTxnDigestsResponse,\n        this.skipDataValidation\n      );\n      return [...results[0], ...results[1]];\n    } catch (err) {\n      throw new Error(\n        `Error getting transactions for object: ${err} for id ${objectID}`\n      );\n    }\n  }\n\n  async getTransactionsForAddress(\n    addressID: string\n  ): Promise<GetTxnDigestsResponse> {\n    const requests = [\n      {\n        method: 'sui_getTransactionsToAddress',\n        args: [addressID],\n      },\n      {\n        method: 'sui_getTransactionsFromAddress',\n        args: [addressID],\n      },\n    ];\n\n    try {\n      const results = await this.client.batchRequestWithType(\n        requests,\n        isGetTxnDigestsResponse,\n        this.skipDataValidation\n      );\n      return [...results[0], ...results[1]];\n    } catch (err) {\n      throw new Error(\n        `Error getting transactions for address: ${err} for id ${addressID}`\n      );\n    }\n  }\n\n  async getTransactionWithEffects(\n    digest: TransactionDigest\n  ): Promise<SuiTransactionResponse> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getTransaction',\n        [digest],\n        isSuiTransactionResponse,\n        this.skipDataValidation\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting transaction with effects: ${err} for digest ${digest}`\n      );\n    }\n  }\n\n  async getTransactionWithEffectsBatch(\n    digests: TransactionDigest[]\n  ): Promise<SuiTransactionResponse[]> {\n    const requests = digests.map((d) => ({\n      method: 'sui_getTransaction',\n      args: [d],\n    }));\n    try {\n      return await this.client.batchRequestWithType(\n        requests,\n        isSuiTransactionResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      const list = digests.join(', ').substring(0, -2);\n      throw new Error(\n        `Error getting transaction effects: ${err} for digests [${list}]`\n      );\n    }\n  }\n\n  async executeTransaction(\n    txnBytes: string,\n    signatureScheme: SignatureScheme,\n    signature: string,\n    pubkey: string\n  ): Promise<SuiTransactionResponse> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_executeTransaction',\n        [txnBytes, signatureScheme, signature, pubkey],\n        isSuiTransactionResponse,\n        this.skipDataValidation\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error executing transaction: ${err}}`);\n    }\n  }\n\n  async executeTransactionWithRequestType(\n    txnBytes: string,\n    signatureScheme: SignatureScheme,\n    signature: string,\n    pubkey: string,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_executeTransaction',\n        [txnBytes, signatureScheme, signature, pubkey, requestType],\n        isSuiExecuteTransactionResponse,\n        this.skipDataValidation\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error executing transaction with request type: ${err}}`);\n    }\n  }\n\n  async getTotalTransactionNumber(): Promise<number> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getTotalTransactionNumber',\n        [],\n        isNumber,\n        this.skipDataValidation\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error fetching total transaction number: ${err}`);\n    }\n  }\n\n  async getTransactionDigestsInRange(\n    start: GatewayTxSeqNumber,\n    end: GatewayTxSeqNumber\n  ): Promise<GetTxnDigestsResponse> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getTransactionsInRange',\n        [start, end],\n        isGetTxnDigestsResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching transaction digests in range: ${err} for range ${start}-${end}`\n      );\n    }\n  }\n\n  async getRecentTransactions(count: number): Promise<GetTxnDigestsResponse> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getRecentTransactions',\n        [count],\n        isGetTxnDigestsResponse,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching recent transactions: ${err} for count ${count}`\n      );\n    }\n  }\n\n  async syncAccountState(address: string): Promise<any> {\n    try {\n      return await this.client.requestWithType(\n        'sui_syncAccountState',\n        [address],\n        isAny,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error sync account address for address: ${address} with error: ${err}`\n      );\n    }\n  }\n\n  // Events\n\n  async getEventsByTransaction(\n    digest: TransactionDigest,\n    count: number = EVENT_QUERY_MAX_LIMIT\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsByTransaction',\n        [digest, count],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by transaction: ${digest}, with error: ${err}`\n      );\n    }\n  }\n\n  async getEventsByModule(\n    package_: string,\n    module: string,\n    count: number = EVENT_QUERY_MAX_LIMIT,\n    startTime: number = DEFAULT_START_TIME,\n    endTime: number = DEFAULT_END_TIME\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsByModule',\n        [package_, module, count, startTime, endTime],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by transaction module: ${package_}::${module}, with error: ${err}`\n      );\n    }\n  }\n\n  async getEventsByMoveEventStructName(\n    moveEventStructName: string,\n    count: number = EVENT_QUERY_MAX_LIMIT,\n    startTime: number = DEFAULT_START_TIME,\n    endTime: number = DEFAULT_END_TIME\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsByMoveEventStructName',\n        [moveEventStructName, count, startTime, endTime],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by move event struct name: ${moveEventStructName}, with error: ${err}`\n      );\n    }\n  }\n\n  async getEventsBySender(\n    sender: SuiAddress,\n    count: number = EVENT_QUERY_MAX_LIMIT,\n    startTime: number = DEFAULT_START_TIME,\n    endTime: number = DEFAULT_END_TIME\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsBySender',\n        [sender, count, startTime, endTime],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by sender: ${sender}, with error: ${err}`\n      );\n    }\n  }\n\n  async getEventsByRecipient(\n    recipient: ObjectOwner,\n    count: number = EVENT_QUERY_MAX_LIMIT,\n    startTime: number = DEFAULT_START_TIME,\n    endTime: number = DEFAULT_END_TIME\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsByRecipient',\n        [recipient, count, startTime, endTime],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by receipient: ${recipient}, with error: ${err}`\n      );\n    }\n  }\n\n  async getEventsByObject(\n    object: ObjectId,\n    count: number = EVENT_QUERY_MAX_LIMIT,\n    startTime: number = DEFAULT_START_TIME,\n    endTime: number = DEFAULT_END_TIME\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsByObject',\n        [object, count, startTime, endTime],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by object: ${object}, with error: ${err}`\n      );\n    }\n  }\n\n  async getEventsByTimeRange(\n    count: number = EVENT_QUERY_MAX_LIMIT,\n    startTime: number = DEFAULT_START_TIME,\n    endTime: number = DEFAULT_END_TIME\n  ): Promise<SuiEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEventsByTimeRange',\n        [count, startTime, endTime],\n        isSuiEvents,\n        this.skipDataValidation\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events by time range: ${startTime} thru ${endTime}, with error: ${err}`\n      );\n    }\n  }\n\n  async subscribeEvent(\n    filter: SuiEventFilter,\n    onMessage: (event: SuiEventEnvelope) => void\n  ): Promise<SubscriptionId> {\n    return this.wsClient.subscribeEvent(filter, onMessage);\n  }\n\n  async unsubscribeEvent(id: SubscriptionId): Promise<boolean> {\n    return this.wsClient.unsubscribeEvent(id);\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SignatureScheme } from '../cryptography/publickey';\nimport { isSuiObjectRef } from '../types/index.guard';\nimport {\n  GetObjectDataResponse,\n  SuiObjectInfo,\n  SuiTransactionResponse,\n  SuiObjectRef,\n  getObjectReference,\n  TransactionEffects,\n  normalizeSuiObjectId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  getTransactionEffects,\n} from '../types';\nimport { JsonRpcProvider } from './json-rpc-provider';\n\nexport class JsonRpcProviderWithCache extends JsonRpcProvider {\n  /**\n   * A list of object references which are being tracked.\n   *\n   * Whenever an object is fetched or updated within the transaction,\n   * its record gets updated.\n   */\n  private objectRefs: Map<string, SuiObjectRef> = new Map();\n\n  // Objects\n  async getObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\n    const resp = await super.getObjectsOwnedByAddress(address);\n    resp.forEach((r) => this.updateObjectRefCache(r));\n    return resp;\n  }\n\n  async getObjectsOwnedByObject(objectId: string): Promise<SuiObjectInfo[]> {\n    const resp = await super.getObjectsOwnedByObject(objectId);\n    resp.forEach((r) => this.updateObjectRefCache(r));\n    return resp;\n  }\n\n  async getObject(objectId: string): Promise<GetObjectDataResponse> {\n    const resp = await super.getObject(objectId);\n    this.updateObjectRefCache(resp);\n    return resp;\n  }\n\n  async getObjectRef(\n    objectId: string,\n    skipCache = false\n  ): Promise<SuiObjectRef | undefined> {\n    const normalizedId = normalizeSuiObjectId(objectId);\n    if (!skipCache && this.objectRefs.has(normalizedId)) {\n      return this.objectRefs.get(normalizedId);\n    }\n\n    const ref = await super.getObjectRef(objectId);\n    this.updateObjectRefCache(ref);\n    return ref;\n  }\n\n  async getObjectBatch(objectIds: string[]): Promise<GetObjectDataResponse[]> {\n    const resp = await super.getObjectBatch(objectIds);\n    resp.forEach((r) => this.updateObjectRefCache(r));\n    return resp;\n  }\n\n  // Transactions\n  async executeTransaction(\n    txnBytes: string,\n    signatureScheme: SignatureScheme,\n    signature: string,\n    pubkey: string\n  ): Promise<SuiTransactionResponse> {\n    const resp = await super.executeTransaction(\n      txnBytes,\n      signatureScheme,\n      signature,\n      pubkey\n    );\n\n    this.updateObjectRefCacheFromTransactionEffects(resp.effects);\n    return resp;\n  }\n\n  async executeTransactionWithRequestType(\n    txnBytes: string,\n    signatureScheme: SignatureScheme,\n    signature: string,\n    pubkey: string,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    if (requestType !== 'WaitForEffectsCert') {\n      console.warn(\n        `It's not recommended to use JsonRpcProviderWithCache with the request ` +\n          `type other than 'WaitForEffectsCert' for executeTransactionWithRequestType. Using ` +\n          `the '${requestType}' may result in stale cache and a failure in subsequent transactions.`\n      );\n    }\n    const resp = await super.executeTransactionWithRequestType(\n      txnBytes,\n      signatureScheme,\n      signature,\n      pubkey,\n      requestType\n    );\n    const effects = getTransactionEffects(resp);\n    if (effects != null) {\n      this.updateObjectRefCacheFromTransactionEffects(effects);\n    }\n    return resp;\n  }\n\n  private updateObjectRefCache(\n    newData: GetObjectDataResponse | SuiObjectRef | undefined\n  ) {\n    if (newData == null) {\n      return;\n    }\n    const ref = isSuiObjectRef(newData) ? newData : getObjectReference(newData);\n    if (ref != null) {\n      this.objectRefs.set(ref.objectId, ref);\n    }\n  }\n\n  private updateObjectRefCacheFromTransactionEffects(\n    effects: TransactionEffects\n  ) {\n    effects.created?.forEach((r) => this.updateObjectRefCache(r.reference));\n    effects.mutated?.forEach((r) => this.updateObjectRefCache(r.reference));\n    effects.unwrapped?.forEach((r) => this.updateObjectRefCache(r.reference));\n    effects.wrapped?.forEach((r) => this.updateObjectRefCache(r));\n    effects.deleted?.forEach((r) => this.objectRefs.delete(r.objectId));\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Buffer } from 'buffer';\n\nexport class HexDataBuffer {\n  private _data: Uint8Array;\n\n  constructor(data: Uint8Array | string) {\n    if (typeof data === 'string') {\n      this._data = new Uint8Array(Buffer.from(data, 'hex'));\n    } else {\n      this._data = data;\n    }\n  }\n\n  getData(): Uint8Array {\n    return this._data;\n  }\n\n  getLength(): number {\n    return this._data.length;\n  }\n\n  toString(): string {\n    return Buffer.from(this._data).toString('hex');\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isTransactionBytes } from '../../types/index.guard';\nimport { JsonRpcClient } from '../../rpc/client';\nimport { Base64DataBuffer } from '../../serialization/base64';\nimport { SuiAddress } from '../../types';\nimport {\n  MoveCallTransaction,\n  MergeCoinTransaction,\n  SplitCoinTransaction,\n  TransferObjectTransaction,\n  TransferSuiTransaction,\n  PayTransaction,\n  PublishTransaction,\n  TxnDataSerializer,\n} from './txn-data-serializer';\n\n/**\n * This is a temporary implementation of the `TxnDataSerializer` class\n * that uses the Sui Gateway RPC API to serialize a transaction into BCS bytes.\n * This class will be deprecated once we support BCS serialization in TypeScript.\n * It is not safe to use this class in production because one cannot authenticate\n * the encoding.\n */\nexport class RpcTxnDataSerializer implements TxnDataSerializer {\n  private client: JsonRpcClient;\n\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param endpoint URL to the Sui RPC endpoint\n   * @param skipDataValidation default to `false`. If set to `true`, the rpc\n   * client will not check if the responses from the RPC server conform to the schema\n   * defined in the TypeScript SDK. The mismatches often happen when the SDK\n   * is in a different version than the RPC server. Skipping the validation\n   * can maximize the version compatibility of the SDK, as not all the schema\n   * changes in the RPC response will affect the caller, but the caller needs to\n   * understand that the data may not match the TypeSrcript definitions.\n   */\n  constructor(endpoint: string, private skipDataValidation: boolean = false) {\n    this.client = new JsonRpcClient(endpoint);\n  }\n\n  async newTransferObject(\n    signerAddress: SuiAddress,\n    t: TransferObjectTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_transferObject',\n        [signerAddress, t.objectId, t.gasPayment, t.gasBudget, t.recipient],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error transferring object: ${err} with args ${t}`);\n    }\n  }\n\n  async newTransferSui(\n    signerAddress: SuiAddress,\n    t: TransferSuiTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_transferSui',\n        [signerAddress, t.suiObjectId, t.gasBudget, t.recipient, t.amount],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error transferring Sui coin: ${err} with args ${t}`);\n    }\n  }\n\n  async newPay(\n    signerAddress: SuiAddress,\n    t: PayTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_pay',\n        [\n          signerAddress,\n          t.inputCoins,\n          t.recipients,\n          t.amounts,\n          t.gasPayment,\n          t.gasBudget,\n        ],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error executing Pay transaction: ${err} with args ${t}`);\n    }\n  }\n\n  async newMoveCall(\n    signerAddress: SuiAddress,\n    t: MoveCallTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_moveCall',\n        [\n          signerAddress,\n          t.packageObjectId,\n          t.module,\n          t.function,\n          t.typeArguments,\n          t.arguments,\n          t.gasPayment,\n          t.gasBudget,\n        ],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error executing a move call: ${err} with args ${t}`);\n    }\n  }\n\n  async newMergeCoin(\n    signerAddress: SuiAddress,\n    t: MergeCoinTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_mergeCoins',\n        [\n          signerAddress,\n          t.primaryCoin,\n          t.coinToMerge,\n          t.gasPayment,\n          t.gasBudget,\n        ],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error merging coin: ${err}`);\n    }\n  }\n\n  async newSplitCoin(\n    signerAddress: SuiAddress,\n    t: SplitCoinTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_splitCoin',\n        [\n          signerAddress,\n          t.coinObjectId,\n          t.splitAmounts,\n          t.gasPayment,\n          t.gasBudget,\n        ],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error splitting coin: ${err}`);\n    }\n  }\n\n  async newPublish(\n    signerAddress: SuiAddress,\n    t: PublishTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_publish',\n        [signerAddress, t.compiledModules, t.gasPayment, t.gasBudget],\n        isTransactionBytes,\n        this.skipDataValidation\n      );\n      return new Base64DataBuffer(resp.txBytes);\n    } catch (err) {\n      throw new Error(`Error publishing package ${err}`);\n    }\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Provider } from '../../providers/provider';\nimport {\n  extractMutableReference,\n  extractStructTag,\n  getObjectReference,\n  isSharedObject,\n  isValidSuiAddress,\n  normalizeSuiObjectId,\n  SuiJsonValue,\n  SuiMoveNormalizedType,\n} from '../../types';\nimport { bcs, CallArg, ObjectArg } from '../../types/sui-bcs';\nimport { MoveCallTransaction } from './txn-data-serializer';\n\nconst MOVE_CALL_SER_ERROR = 'Move call argument serialization error:';\n\nconst isTypeFunc = (type: string) => (t: any) => typeof t === type;\n\nexport class CallArgSerializer {\n  constructor(private provider: Provider) {}\n\n  async serializeMoveCallArguments(\n    txn: MoveCallTransaction\n  ): Promise<CallArg[]> {\n    const normalized = await this.provider.getNormalizedMoveFunction(\n      normalizeSuiObjectId(txn.packageObjectId),\n      txn.module,\n      txn.function\n    );\n    const params = normalized.parameters;\n    // Entry functions can have a mutable reference to an instance of the TxContext\n    // struct defined in the TxContext module as the last parameter. The caller of\n    // the function does not need to pass it in as an argument.\n    const hasTxContext = params.length > 0 && this.isTxContext(params.at(-1)!);\n    const userParams = hasTxContext\n      ? params.slice(0, params.length - 1)\n      : params;\n\n    if (userParams.length !== txn.arguments.length) {\n      throw new Error(\n        `${MOVE_CALL_SER_ERROR} expect ${userParams.length} ` +\n          `arguments, received ${txn.arguments.length} arguments`\n      );\n    }\n    return Promise.all(\n      userParams.map(async (param, i) =>\n        this.newCallArg(param, txn.arguments[i])\n      )\n    );\n  }\n\n  async newObjectArg(objectId: string): Promise<ObjectArg> {\n    const object = await this.provider.getObject(objectId);\n    if (isSharedObject(object)) {\n      return { Shared: objectId };\n    }\n\n    return { ImmOrOwned: getObjectReference(object)! };\n  }\n\n  private async newCallArg(\n    expectedType: SuiMoveNormalizedType,\n    argVal: SuiJsonValue\n  ): Promise<CallArg> {\n    const structVal = extractStructTag(expectedType);\n    if (structVal != null) {\n      if (typeof argVal !== 'string') {\n        throw new Error(\n          `${MOVE_CALL_SER_ERROR} expect the argument to be an object id string, got ${argVal}`\n        );\n      }\n      return { Object: await this.newObjectArg(argVal) };\n    }\n\n    let serType = this.getPureSerializationType(expectedType, argVal);\n\n    return {\n      Pure: bcs.ser(serType, argVal).toBytes(),\n    };\n  }\n\n  /**\n   *\n   * @param argVal used to do additional data validation to make sure the argVal\n   * matches the normalized Move types. If `argVal === undefined`, the data validation\n   * will be skipped. This is useful in the case where `normalizedType` is a vector<T>\n   * and `argVal` is an empty array, the data validation for the inner types will be skipped.\n   */\n  private getPureSerializationType(\n    normalizedType: SuiMoveNormalizedType,\n    argVal: SuiJsonValue | undefined\n  ): string {\n    const allowedTypes = ['Address', 'Bool', 'U8', 'U32', 'U64', 'U128'];\n    if (\n      typeof normalizedType === 'string' &&\n      allowedTypes.includes(normalizedType)\n    ) {\n      if (normalizedType in ['U8', 'U32', 'U64', 'U128']) {\n        this.checkArgVal(isTypeFunc('number'), argVal, 'number');\n      } else if (normalizedType === 'Bool') {\n        this.checkArgVal(isTypeFunc('boolean'), argVal, 'boolean');\n      } else if (normalizedType === 'Address') {\n        this.checkArgVal(\n          (t: any) => typeof t === 'string' && isValidSuiAddress(t),\n          argVal,\n          'valid SUI address'\n        );\n      }\n      return normalizedType.toLowerCase();\n    } else if (typeof normalizedType === 'string') {\n      throw new Error(\n        `${MOVE_CALL_SER_ERROR} unknown pure normalized type ${normalizedType}`\n      );\n    }\n\n    if ('Vector' in normalizedType) {\n      if (typeof argVal === 'string' && normalizedType.Vector === 'U8') {\n        return 'string';\n      }\n\n      if (!Array.isArray(argVal)) {\n        throw new Error(\n          `Expect ${argVal} to be a array, received ${typeof argVal}`\n        );\n      }\n      const innerType = this.getPureSerializationType(\n        normalizedType.Vector,\n        // undefined when argVal is empty\n        argVal[0]\n      );\n      const res = `vector<${innerType}>`;\n      // TODO: can we get rid of this call and make it happen automatically?\n      bcs.registerVectorType(res, innerType);\n      return res;\n    }\n\n    // TODO: update this once we support vector of object ids\n    throw new Error(\n      `${MOVE_CALL_SER_ERROR} unknown normalized type ${normalizedType}`\n    );\n  }\n\n  private checkArgVal(\n    check: (t: any) => boolean,\n    argVal: SuiJsonValue | undefined,\n    expectedType: string\n  ) {\n    if (argVal === undefined) {\n      return;\n    }\n    if (!check(argVal)) {\n      throw new Error(\n        `Expect ${argVal} to be ${expectedType}, received ${typeof argVal}`\n      );\n    }\n  }\n\n  private isTxContext(param: SuiMoveNormalizedType): boolean {\n    const struct = extractMutableReference(param)?.Struct;\n    return (\n      struct?.address === '0x2' &&\n      struct?.module === 'tx_context' &&\n      struct?.name === 'TxContext'\n    );\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Base64DataBuffer } from '../../serialization/base64';\nimport {\n  bcs,\n  Coin,\n  COIN_JOIN_FUNC_NAME,\n  COIN_MODULE_NAME,\n  COIN_PACKAGE_ID,\n  COIN_SPLIT_VEC_FUNC_NAME,\n  SuiAddress,\n  Transaction,\n  TransactionData,\n  TypeTag,\n} from '../../types';\nimport {\n  MoveCallTransaction,\n  MergeCoinTransaction,\n  SplitCoinTransaction,\n  TransferObjectTransaction,\n  TransferSuiTransaction,\n  PublishTransaction,\n  TxnDataSerializer,\n  PayTransaction,\n} from './txn-data-serializer';\nimport { Provider } from '../../providers/provider';\nimport { CallArgSerializer } from './call-arg-serializer';\n\nconst TYPE_TAG = Array.from('TransactionData::').map((e) => e.charCodeAt(0));\n\nexport class LocalTxnDataSerializer implements TxnDataSerializer {\n  /**\n   * Need a provider to fetch the latest object reference. Ideally the provider\n   * should cache the object reference locally\n   */\n  constructor(private provider: Provider) {}\n\n  async newTransferObject(\n    signerAddress: SuiAddress,\n    t: TransferObjectTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const objectRef = await this.provider.getObjectRef(t.objectId);\n      const tx = {\n        TransferObject: {\n          recipient: t.recipient,\n          object_ref: objectRef!,\n        },\n      };\n      return await this.constructTransactionData(\n        tx,\n        // TODO: make `gasPayment` a required field in `TransferObjectTransaction`\n        t.gasPayment!,\n        t.gasBudget,\n        signerAddress\n      );\n    } catch (err) {\n      throw new Error(\n        `Error constructing a TransferObject transaction: ${err} args ${JSON.stringify(\n          t\n        )}`\n      );\n    }\n  }\n\n  async newTransferSui(\n    signerAddress: SuiAddress,\n    t: TransferSuiTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const tx = {\n        TransferSui: {\n          recipient: t.recipient,\n          amount: t.amount == null ? { None: null } : { Some: t.amount },\n        },\n      };\n      return await this.constructTransactionData(\n        tx,\n        t.suiObjectId,\n        t.gasBudget,\n        signerAddress\n      );\n    } catch (err) {\n      throw new Error(\n        `Error constructing a TransferSui transaction: ${err} args ${JSON.stringify(\n          t\n        )}`\n      );\n    }\n  }\n\n  async newPay(\n    signerAddress: SuiAddress,\n    t: PayTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const tx = {\n        Pay: {\n          input_coins: t.inputCoins,\n          recipients: t.recipients,\n          amounts: t.amounts,\n        },\n      };\n      return await this.constructTransactionData(\n        tx,\n        t.gasPayment!,\n        t.gasBudget,\n        signerAddress\n      );\n    } catch (err) {\n      throw new Error(\n        `Error constructing a Pay transaction: ${err} args ${JSON.stringify(t)}`\n      );\n    }\n  }\n\n  async newMoveCall(\n    signerAddress: SuiAddress,\n    t: MoveCallTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const pkg = await this.provider.getObjectRef(t.packageObjectId);\n      const tx = {\n        Call: {\n          package: pkg!,\n          module: t.module,\n          function: t.function,\n          typeArguments: t.typeArguments as TypeTag[],\n          arguments: await new CallArgSerializer(\n            this.provider\n          ).serializeMoveCallArguments(t),\n        },\n      };\n\n      return await this.constructTransactionData(\n        tx,\n        // TODO: make `gasPayment` a required field in `MoveCallTransaction`\n        t.gasPayment!,\n        t.gasBudget,\n        signerAddress\n      );\n    } catch (err) {\n      throw new Error(\n        `Error constructing a move call: ${err} args ${JSON.stringify(t)}`\n      );\n    }\n  }\n\n  async newMergeCoin(\n    signerAddress: SuiAddress,\n    t: MergeCoinTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      return await this.newMoveCall(signerAddress, {\n        packageObjectId: COIN_PACKAGE_ID,\n        module: COIN_MODULE_NAME,\n        function: COIN_JOIN_FUNC_NAME,\n        typeArguments: [await this.getCoinStructTag(t.coinToMerge)],\n        arguments: [t.primaryCoin, t.coinToMerge],\n        gasPayment: t.gasPayment,\n        gasBudget: t.gasBudget,\n      });\n    } catch (err) {\n      throw new Error(\n        `Error constructing a MergeCoin Transaction: ${err} args ${JSON.stringify(\n          t\n        )}`\n      );\n    }\n  }\n\n  async newSplitCoin(\n    signerAddress: SuiAddress,\n    t: SplitCoinTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      return await this.newMoveCall(signerAddress, {\n        packageObjectId: COIN_PACKAGE_ID,\n        module: COIN_MODULE_NAME,\n        function: COIN_SPLIT_VEC_FUNC_NAME,\n        typeArguments: [await this.getCoinStructTag(t.coinObjectId)],\n        arguments: [t.coinObjectId, t.splitAmounts],\n        gasPayment: t.gasPayment,\n        gasBudget: t.gasBudget,\n      });\n    } catch (err) {\n      throw new Error(\n        `Error constructing a SplitCoin Transaction: ${err} args ${JSON.stringify(\n          t\n        )}`\n      );\n    }\n  }\n\n  async newPublish(\n    signerAddress: SuiAddress,\n    t: PublishTransaction\n  ): Promise<Base64DataBuffer> {\n    try {\n      const tx = {\n        Publish: {\n          modules: t.compiledModules as ArrayLike<ArrayLike<number>>,\n        },\n      };\n      return await this.constructTransactionData(\n        tx,\n        // TODO: make `gasPayment` a required field in `PublishTransaction`\n        t.gasPayment!,\n        t.gasBudget,\n        signerAddress\n      );\n    } catch (err) {\n      throw new Error(\n        `Error constructing a newPublish transaction: ${err} with args ${JSON.stringify(\n          t\n        )}`\n      );\n    }\n  }\n\n  private async getCoinStructTag(coinId: string): Promise<TypeTag> {\n    const coin = await this.provider.getObject(coinId);\n    const coinTypeArg = Coin.getCoinTypeArg(coin);\n    if (coinTypeArg == null) {\n      throw new Error(`Object ${coinId} is not a valid coin type`);\n    }\n    return { struct: Coin.getCoinStructTag(coinTypeArg) };\n  }\n\n  private async constructTransactionData(\n    tx: Transaction,\n    gasObjectId: string,\n    gasBudget: number,\n    signerAddress: SuiAddress\n  ): Promise<Base64DataBuffer> {\n    // TODO: mark gasPayment as required in `MoveCallTransaction`\n    const gasPayment = await this.provider.getObjectRef(gasObjectId);\n    const txData = {\n      kind: {\n        // TODO: support batch txns\n        Single: tx,\n      },\n      gasPayment: gasPayment!,\n      // Need to keep in sync with\n      // https://github.com/MystenLabs/sui/blob/f32877f2e40d35a008710c232e49b57aab886462/crates/sui-types/src/messages.rs#L338\n      gasPrice: 1,\n      gasBudget: gasBudget,\n      sender: signerAddress,\n    };\n\n    console.log('transactiondata', txData);\n\n    return this.serializeTransactionData(txData);\n  }\n\n  private serializeTransactionData(\n    tx: TransactionData,\n    // TODO: derive the buffer size automatically\n    size: number = 2048\n  ): Base64DataBuffer {\n    const dataBytes = bcs.ser('TransactionData', tx, size).toBytes();\n    const serialized = new Uint8Array(TYPE_TAG.length + dataBytes.length);\n    serialized.set(TYPE_TAG);\n    serialized.set(dataBytes, TYPE_TAG.length);\n    return new Base64DataBuffer(serialized);\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SignatureScheme } from '../cryptography/publickey';\nimport {\n  CertifiedTransaction,\n  TransactionDigest,\n  GetTxnDigestsResponse,\n  GatewayTxSeqNumber,\n  SuiObjectInfo,\n  GetObjectDataResponse,\n  SuiTransactionResponse,\n  SuiObjectRef,\n  SuiMoveFunctionArgTypes,\n  SuiMoveNormalizedFunction,\n  SuiMoveNormalizedStruct,\n  SuiMoveNormalizedModule,\n  SuiMoveNormalizedModules,\n  SuiEventFilter,\n  SuiEventEnvelope,\n  SubscriptionId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  ObjectOwner,\n  SuiAddress,\n  ObjectId,\n  SuiEvents,\n} from '../types';\nimport { Provider } from './provider';\n\nexport class VoidProvider extends Provider {\n  // Objects\n  async getObjectsOwnedByAddress(_address: string): Promise<SuiObjectInfo[]> {\n    throw this.newError('getObjectsOwnedByAddress');\n  }\n\n  async getGasObjectsOwnedByAddress(\n    _address: string\n  ): Promise<SuiObjectInfo[]> {\n    throw this.newError('getGasObjectsOwnedByAddress');\n  }\n\n  async getObject(_objectId: string): Promise<GetObjectDataResponse> {\n    throw this.newError('getObject');\n  }\n\n  async getObjectRef(_objectId: string): Promise<SuiObjectRef | undefined> {\n    throw this.newError('getObjectRef');\n  }\n\n  // Transactions\n  async getTransaction(\n    _digest: TransactionDigest\n  ): Promise<CertifiedTransaction> {\n    throw this.newError('getTransaction');\n  }\n\n  async executeTransaction(\n    _txnBytes: string,\n    _signatureScheme: SignatureScheme,\n    _signature: string,\n    _pubkey: string\n  ): Promise<SuiTransactionResponse> {\n    throw this.newError('executeTransaction');\n  }\n\n  async executeTransactionWithRequestType(\n    _txnBytes: string,\n    _signatureScheme: SignatureScheme,\n    _signature: string,\n    _pubkey: string,\n    _requestType: ExecuteTransactionRequestType\n  ): Promise<SuiExecuteTransactionResponse> {\n    throw this.newError('executeTransaction with request Type');\n  }\n\n  async getTotalTransactionNumber(): Promise<number> {\n    throw this.newError('getTotalTransactionNumber');\n  }\n\n  async getTransactionDigestsInRange(\n    _start: GatewayTxSeqNumber,\n    _end: GatewayTxSeqNumber\n  ): Promise<GetTxnDigestsResponse> {\n    throw this.newError('getTransactionDigestsInRange');\n  }\n\n  async getRecentTransactions(_count: number): Promise<GetTxnDigestsResponse> {\n    throw this.newError('getRecentTransactions');\n  }\n\n  async getMoveFunctionArgTypes(\n    _objectId: string,\n    _moduleName: string,\n    _functionName: string\n  ): Promise<SuiMoveFunctionArgTypes> {\n    throw this.newError('getMoveFunctionArgTypes');\n  }\n\n  async getNormalizedMoveModulesByPackage(\n    _objectId: string\n  ): Promise<SuiMoveNormalizedModules> {\n    throw this.newError('getNormalizedMoveModulesByPackage');\n  }\n\n  async getNormalizedMoveModule(\n    _objectId: string,\n    _moduleName: string\n  ): Promise<SuiMoveNormalizedModule> {\n    throw this.newError('getNormalizedMoveModule');\n  }\n\n  async getNormalizedMoveFunction(\n    _objectId: string,\n    _moduleName: string,\n    _functionName: string\n  ): Promise<SuiMoveNormalizedFunction> {\n    throw this.newError('getNormalizedMoveFunction');\n  }\n\n  async getNormalizedMoveStruct(\n    _objectId: string,\n    _oduleName: string,\n    _structName: string\n  ): Promise<SuiMoveNormalizedStruct> {\n    throw this.newError('getNormalizedMoveStruct');\n  }\n\n  async syncAccountState(_address: string): Promise<any> {\n    throw this.newError('syncAccountState');\n  }\n\n  async getEventsByTransaction(\n    _digest: TransactionDigest,\n    _count: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsByTransaction');\n  }\n\n  async getEventsByModule(\n    _package: string,\n    _module: string,\n    _count: number,\n    _startTime: number,\n    _endTime: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsByTransactionModule');\n  }\n\n  async getEventsByMoveEventStructName(\n    _moveEventStructName: string,\n    _count: number,\n    _startTime: number,\n    _endTime: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsByMoveEventStructName');\n  }\n\n  async getEventsBySender(\n    _sender: SuiAddress,\n    _count: number,\n    _startTime: number,\n    _endTime: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsBySender');\n  }\n\n  async getEventsByRecipient(\n    _recipient: ObjectOwner,\n    _count: number,\n    _startTime: number,\n    _endTime: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsByRecipient');\n  }\n\n  async getEventsByObject(\n    _object: ObjectId,\n    _count: number,\n    _startTime: number,\n    _endTime: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsByObject');\n  }\n\n  async getEventsByTimeRange(\n    _count: number,\n    _startTime: number,\n    _endTime: number\n  ): Promise<SuiEvents> {\n    throw this.newError('getEventsByTimeRange');\n  }\n\n  async subscribeEvent(\n    _filter: SuiEventFilter,\n    _onMessage: (event: SuiEventEnvelope) => void\n  ): Promise<SubscriptionId> {\n    throw this.newError('subscribeEvent');\n  }\n\n  async unsubscribeEvent(_id: SubscriptionId): Promise<boolean> {\n    throw this.newError('unsubscribeEvent');\n  }\n\n  private newError(operation: string): Error {\n    return new Error(`Please use a valid provider for ${operation}`);\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { JsonRpcProvider } from '../providers/json-rpc-provider';\nimport { Provider } from '../providers/provider';\nimport { VoidProvider } from '../providers/void-provider';\nimport { Base64DataBuffer } from '../serialization/base64';\nimport {\n  ExecuteTransactionRequestType,\n  SuiAddress,\n  SuiExecuteTransactionResponse,\n  SuiTransactionResponse,\n} from '../types';\nimport { SignaturePubkeyPair, Signer } from './signer';\nimport { RpcTxnDataSerializer } from './txn-data-serializers/rpc-txn-data-serializer';\nimport {\n  MoveCallTransaction,\n  MergeCoinTransaction,\n  PayTransaction,\n  SplitCoinTransaction,\n  TransferObjectTransaction,\n  TransferSuiTransaction,\n  TxnDataSerializer,\n  PublishTransaction,\n} from './txn-data-serializers/txn-data-serializer';\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class SignerWithProvider implements Signer {\n  readonly provider: Provider;\n  readonly serializer: TxnDataSerializer;\n\n  ///////////////////\n  // Sub-classes MUST implement these\n\n  // Returns the checksum address\n  abstract getAddress(): Promise<SuiAddress>;\n\n  /**\n   * Returns the signature for the data and the public key of the signer\n   */\n  abstract signData(data: Base64DataBuffer): Promise<SignaturePubkeyPair>;\n\n  // Returns a new instance of the Signer, connected to provider.\n  // This MAY throw if changing providers is not supported.\n  abstract connect(provider: Provider): SignerWithProvider;\n\n  ///////////////////\n  // Sub-classes MAY override these\n\n  constructor(provider?: Provider, serializer?: TxnDataSerializer) {\n    this.provider = provider || new VoidProvider();\n    let endpoint = '';\n    let skipDataValidation = false;\n    if (this.provider instanceof JsonRpcProvider) {\n      endpoint = this.provider.endpoint;\n      skipDataValidation = this.provider.skipDataValidation;\n    }\n    this.serializer =\n      serializer || new RpcTxnDataSerializer(endpoint, skipDataValidation);\n  }\n\n  /**\n   * Sign a transaction and submit to the Gateway for execution\n   * @experimental\n   * @param txBytes BCS serialised TransactionData bytes\n   */\n  async signAndExecuteTransaction(\n    txBytes: Base64DataBuffer\n  ): Promise<SuiTransactionResponse> {\n    const sig = await this.signData(txBytes);\n    return await this.provider.executeTransaction(\n      txBytes.toString(),\n      sig.signatureScheme,\n      sig.signature.toString(),\n      sig.pubKey.toString()\n    );\n  }\n\n  /**\n   * @experimental Sign a transaction and submit to the Fullnode for execution\n   *\n   * @param txBytes BCS serialised TransactionData bytes\n   */\n  async signAndExecuteTransactionWithRequestType(\n    txBytes: Base64DataBuffer,\n    requestType: ExecuteTransactionRequestType\n  ): Promise<SuiExecuteTransactionResponse> {\n    const sig = await this.signData(txBytes);\n    return await this.provider.executeTransactionWithRequestType(\n      txBytes.toString(),\n      sig.signatureScheme,\n      sig.signature.toString(),\n      sig.pubKey.toString(),\n      requestType\n    );\n  }\n\n  /**\n   * Trigger gateway to sync account state related to the address,\n   * based on the account state on validators.\n   */\n  async syncAccountState(): Promise<any> {\n    const address = await this.getAddress();\n    return await this.provider.syncAccountState(address);\n  }\n\n  /**\n   * Serialize and Sign a `TransferObject` transaction and submit to the Gateway for execution\n   */\n  async transferObject(\n    transaction: TransferObjectTransaction\n  ): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newTransferObject(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /**\n   * Serialize and Sign a `TransferSui` transaction and submit to the Gateway for execution\n   */\n  async transferSui(\n    transaction: TransferSuiTransaction\n  ): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newTransferSui(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /**\n   * Serialize and Sign a `Pay` transaction and submit to the Gateway for execution\n   */\n  async pay(transaction: PayTransaction): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newPay(signerAddress, transaction);\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /**\n   * Serialize and Sign a `MergeCoin` transaction and submit to the Gateway for execution\n   */\n  async mergeCoin(\n    transaction: MergeCoinTransaction\n  ): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newMergeCoin(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /**\n   * Serialize and Sign a `SplitCoin` transaction and submit to the Gateway for execution\n   */\n  async splitCoin(\n    transaction: SplitCoinTransaction\n  ): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newSplitCoin(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /**\n   * Serialize and Sign a `MoveCall` transaction and submit to the Gateway for execution\n   */\n  async executeMoveCall(\n    transaction: MoveCallTransaction\n  ): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newMoveCall(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /**\n   * Publish a Move package on chain\n   * @param transaction See {@link PublishTransaction}\n   */\n  async publish(\n    transaction: PublishTransaction\n  ): Promise<SuiTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newPublish(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransaction(txBytes);\n  }\n\n  /* ---------------------------- Experimental API ---------------------------- */\n  /**\n   * @experimental Serialize and sign a `TransferObject` transaction and submit to the Fullnode\n   * for execution\n   */\n  async transferObjectWithRequestType(\n    transaction: TransferObjectTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newTransferObject(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n\n  /**\n   * @experimental Serialize and sign a `TransferSui` transaction and submit to the Fullnode\n   * for execution\n   */\n  async transferSuiWithRequestType(\n    transaction: TransferSuiTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newTransferSui(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n\n  /**\n   * @experimental Serialize and Sign a `Pay` transaction and submit to the fullnode for execution\n   */\n  async payWithRequestType(\n    transaction: PayTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newPay(signerAddress, transaction);\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n\n  /**\n   * @experimental Serialize and sign a `MergeCoin` transaction and submit to the Fullnode\n   * for execution\n   */\n  async mergeCoinWithRequestType(\n    transaction: MergeCoinTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newMergeCoin(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n\n  /**\n   * @experimental Serialize and sign a `SplitCoin` transaction and submit to the Fullnode\n   * for execution\n   */\n  async splitCoinWithRequestType(\n    transaction: SplitCoinTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newSplitCoin(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n\n  /**\n   * @experimental Serialize and sign a `MoveCall` transaction and submit to the Fullnode\n   * for execution\n   */\n  async executeMoveCallWithRequestType(\n    transaction: MoveCallTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newMoveCall(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n\n  /**\n   * @experimental Serialize and sign a `Publish` transaction and submit to the Fullnode\n   * for execution\n   */\n  async publishWithRequestType(\n    transaction: PublishTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\n  ): Promise<SuiExecuteTransactionResponse> {\n    const signerAddress = await this.getAddress();\n    const txBytes = await this.serializer.newPublish(\n      signerAddress,\n      transaction\n    );\n    return await this.signAndExecuteTransactionWithRequestType(\n      txBytes,\n      requestType\n    );\n  }\n}\n","// Copyright (c) 2022, Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Keypair } from '../cryptography/keypair';\nimport { Provider } from '../providers/provider';\nimport { Base64DataBuffer } from '../serialization/base64';\nimport { SuiAddress } from '../types';\nimport { SignaturePubkeyPair } from './signer';\nimport { SignerWithProvider } from './signer-with-provider';\nimport { TxnDataSerializer } from './txn-data-serializers/txn-data-serializer';\n\nexport class RawSigner extends SignerWithProvider {\n  private readonly keypair: Keypair;\n\n  constructor(\n    keypair: Keypair,\n    provider?: Provider,\n    serializer?: TxnDataSerializer\n  ) {\n    super(provider, serializer);\n    this.keypair = keypair;\n  }\n\n  async getAddress(): Promise<SuiAddress> {\n    return this.keypair.getPublicKey().toSuiAddress();\n  }\n\n  async signData(data: Base64DataBuffer): Promise<SignaturePubkeyPair> {\n    return {\n      signatureScheme: this.keypair.getKeyScheme(),\n      signature: this.keypair.signData(data),\n      pubKey: this.keypair.getPublicKey(),\n    };\n  }\n\n  connect(provider: Provider): SignerWithProvider {\n    return new RawSigner(this.keypair, provider);\n  }\n}\n"],"mappings":"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","names":["Buffer","Buffer","BN","Buffer","sha3","Buffer","BN","sha3","BN","BN","BN","Buffer","writer","reader","Buffer"]}