import { Base64DataBuffer } from '../../serialization/base64';
import { SuiAddress } from '../../types';
import { MoveCallTransaction, MergeCoinTransaction, SplitCoinTransaction, TransferObjectTransaction, TransferSuiTransaction, PublishTransaction, TxnDataSerializer, PayTransaction } from './txn-data-serializer';
import { Provider } from '../../providers/provider';
export declare class LocalTxnDataSerializer implements TxnDataSerializer {
    private provider;
    /**
     * Need a provider to fetch the latest object reference. Ideally the provider
     * should cache the object reference locally
     */
    constructor(provider: Provider);
    newTransferObject(signerAddress: SuiAddress, t: TransferObjectTransaction): Promise<Base64DataBuffer>;
    newTransferSui(signerAddress: SuiAddress, t: TransferSuiTransaction): Promise<Base64DataBuffer>;
    newPay(signerAddress: SuiAddress, t: PayTransaction): Promise<Base64DataBuffer>;
    newMoveCall(signerAddress: SuiAddress, t: MoveCallTransaction): Promise<Base64DataBuffer>;
    newMergeCoin(signerAddress: SuiAddress, t: MergeCoinTransaction): Promise<Base64DataBuffer>;
    newSplitCoin(signerAddress: SuiAddress, t: SplitCoinTransaction): Promise<Base64DataBuffer>;
    newPublish(signerAddress: SuiAddress, t: PublishTransaction): Promise<Base64DataBuffer>;
    private getCoinStructTag;
    private constructTransactionData;
    private serializeTransactionData;
}
