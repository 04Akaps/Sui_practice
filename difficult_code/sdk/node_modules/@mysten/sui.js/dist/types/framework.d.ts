import { GetObjectDataResponse, SuiMoveObject, SuiObjectInfo, SuiObject, SuiData } from './objects';
import { SuiAddress } from './common';
import BN from 'bn.js';
import { Option } from './option';
import { StructTag } from './sui-bcs';
export declare const COIN_PACKAGE_ID = "0x2";
export declare const COIN_MODULE_NAME = "coin";
export declare const COIN_TYPE: string;
export declare const COIN_SPLIT_VEC_FUNC_NAME = "split_vec";
export declare const COIN_JOIN_FUNC_NAME = "join";
declare type ObjectData = GetObjectDataResponse | SuiMoveObject | SuiObjectInfo;
/**
 * Utility class for 0x2::coin
 * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4
 */
export declare class Coin {
    static isCoin(data: ObjectData): boolean;
    static getCoinTypeArg(obj: ObjectData): string | null;
    static isSUI(obj: ObjectData): boolean;
    static getCoinSymbol(coinTypeArg: string): string;
    static getCoinStructTag(coinTypeArg: string): StructTag;
    static getBalance(data: GetObjectDataResponse | SuiMoveObject): BN | undefined;
    static getZero(): BN;
    private static getType;
}
export declare type DelegationData = SuiMoveObject & Pick<SuiData, 'dataType'> & {
    type: '0x2::delegation::Delegation';
    fields: {
        active_delegation: Option<number>;
        delegate_amount: number;
        next_reward_unclaimed_epoch: number;
        validator_address: SuiAddress;
        info: {
            id: string;
            version: number;
        };
        coin_locked_until_epoch: Option<SuiMoveObject>;
        ending_epoch: Option<number>;
    };
};
export declare type DelegationSuiObject = Omit<SuiObject, 'data'> & {
    data: DelegationData;
};
export declare class Delegation {
    static readonly SUI_OBJECT_TYPE = "0x2::delegation::Delegation";
    private suiObject;
    static isDelegationSuiObject(obj: SuiObject): obj is DelegationSuiObject;
    constructor(obj: DelegationSuiObject);
    nextRewardUnclaimedEpoch(): number;
    activeDelegation(): bigint;
    delegateAmount(): number;
    endingEpoch(): number | undefined;
    validatorAddress(): string;
    isActive(): boolean;
    hasUnclaimedRewards(epoch: number): boolean;
}
export {};
